SF = zeros(22,1);
SF(1) = daz/2 - daz_b/2;
SF(2) = day/2 - day_b/2;
SF(3) = dax/2 - dax_b/2;
SF(4) = (q0*SF(2))/2 - q2/2 + (q1*SF(1))/2 + (q3*SF(3))/2;
SF(5) = q3/2 + (q0*SF(1))/2 - (q1*SF(2))/2 + (q2*SF(3))/2;
SF(6) = q0/2 + (q1*SF(3))/2 + (q2*SF(2))/2 - (q3*SF(1))/2;
SF(7) = q1/2 - (q0*SF(3))/2 + (q2*SF(1))/2 + (q3*SF(2))/2;
SF(8) = q3/2 - (q0*SF(1))/2 + (q1*SF(2))/2 + (q2*SF(3))/2;
SF(9) = q2/2 + (q0*SF(2))/2 + (q1*SF(1))/2 - (q3*SF(3))/2;
SF(10) = (q0*SF(3))/2 - q1/2 + (q2*SF(1))/2 + (q3*SF(2))/2;
SF(11) = q0/2 + (q1*SF(3))/2 - (q2*SF(2))/2 + (q3*SF(1))/2;
SF(12) = q0/2 - (q1*SF(3))/2 + (q2*SF(2))/2 + (q3*SF(1))/2;
SF(13) = q1/2 + (q0*SF(3))/2 - (q2*SF(1))/2 + (q3*SF(2))/2;
SF(14) = q2/2 - (q0*SF(2))/2 + (q1*SF(1))/2 + (q3*SF(3))/2;
SF(15) = (q0*SF(1))/2 - q3/2 + (q1*SF(2))/2 + (q2*SF(3))/2;
SF(16) = - q0^2 - q1^2 - q2^2 - q3^2;
SF(17) = dvz - dvz_b;
SF(18) = q0^2 - q1^2 - q2^2 + q3^2;
SF(19) = q0^2 - q1^2 + q2^2 - q3^2;
SF(20) = 2*q0*q1 - 2*q2*q3;
SF(21) = q0^2 + q1^2 - q2^2 - q3^2;
SF(22) = 2*q1*q3;
SG = zeros(5,1);
SG(1) = - q0^2 - q1^2 - q2^2 - q3^2;
SG(2) = q3^2;
SG(3) = q2^2;
SG(4) = q1^2;
SG(5) = q0^2;
SQ = zeros(8,1);
SQ(1) = - dvyNoise*(2*q0*q1 + 2*q2*q3)*(SG(2) - SG(3) + SG(4) - SG(5)) - dvzNoise*(2*q0*q1 - 2*q2*q3)*(SG(2) - SG(3) - SG(4) + SG(5)) - dvxNoise*(2*q0*q2 - 2*q1*q3)*(2*q0*q3 + 2*q1*q2);
SQ(2) = dvxNoise*(2*q0*q2 - 2*q1*q3)*(SG(2) + SG(3) - SG(4) - SG(5)) + dvzNoise*(2*q0*q2 + 2*q1*q3)*(SG(2) - SG(3) - SG(4) + SG(5)) - dvyNoise*(2*q0*q1 + 2*q2*q3)*(2*q0*q3 - 2*q1*q2);
SQ(3) = dvyNoise*(2*q0*q3 - 2*q1*q2)*(SG(2) - SG(3) + SG(4) - SG(5)) - dvxNoise*(2*q0*q3 + 2*q1*q2)*(SG(2) + SG(3) - SG(4) - SG(5)) - dvzNoise*(2*q0*q1 - 2*q2*q3)*(2*q0*q2 + 2*q1*q3);
SQ(4) = SG(1)^2;
SQ(5) = 2*q2*q3;
SQ(6) = 2*q1*q3;
SQ(7) = 2*q1*q2;
SQ(8) = SG(5);
SPP = zeros(21,1);
SPP(1) = 2*q2*SF(12) - 2*q0*SF(14) + 2*q1*SF(15) + 2*q3*SF(13);
SPP(2) = 2*q0*SF(10) + 2*q2*SF(8) + 2*q1*SF(11) - 2*q3*SF(9);
SPP(3) = 2*q0*SF(15) + 2*q1*SF(14) - 2*q2*SF(13) + 2*q3*SF(12);
SPP(4) = 2*q0*SF(11) - 2*q1*SF(10) + 2*q2*SF(9) + 2*q3*SF(8);
SPP(5) = 2*q0*SF(12) + 2*q1*SF(13) + 2*q2*SF(14) - 2*q3*SF(15);
SPP(6) = 2*q1*SF(9) - 2*q0*SF(8) + 2*q2*SF(10) + 2*q3*SF(11);
SPP(7) = dvx*(2*q0*q1 + 2*q2*q3) - dvy*(SF(22) - 2*q0*q2);
SPP(8) = SF(17)*(2*q0*q3 - 2*q1*q2) + dvy*(SF(22) + 2*q0*q2);
SPP(9) = 2*q0*SF(6) - 2*q2*SF(4) + 2*q1*SF(7) + 2*q3*SF(5);
SPP(10) = 2*q1*SF(6) - 2*q0*SF(7) + 2*q2*SF(5) + 2*q3*SF(4);
SPP(11) = 2*q0*SF(4) - 2*q1*SF(5) + 2*q2*SF(6) + 2*q3*SF(7);
SPP(12) = dvx*SF(18) - SF(17)*(SF(22) - 2*q0*q2);
SPP(13) = dvy*SF(18) - SF(17)*(2*q0*q1 + 2*q2*q3);
SPP(14) = q0^2 - q1^2 - q2^2 + q3^2;
SPP(15) = dvx*SF(19) - dvy*(2*q0*q3 + 2*q1*q2);
SPP(16) = dvx*SF(20) + SF(17)*(2*q0*q3 + 2*q1*q2);
SPP(17) = dvy*SF(21) + dvx*(2*q0*q3 - 2*q1*q2);
SPP(18) = SF(17)*SF(21) - dvx*(SF(22) + 2*q0*q2);
SPP(19) = SF(17)*SF(19) + dvy*SF(20);
SPP(20) = SF(22) + 2*q0*q2;
SPP(21) = SF(16);
nextP = zeros(21,21);
nextP(1,1) = daxNoise*SQ(4) + SPP(5)*(OP(1,1)*SPP(5) + OP(2,1)*SPP(6) - OP(3,1)*SPP(11) + OP(10,1)*SPP(21)) + SPP(6)*(OP(1,2)*SPP(5) + OP(2,2)*SPP(6) - OP(3,2)*SPP(11) + OP(10,2)*SPP(21)) - SPP(11)*(OP(1,3)*SPP(5) + OP(2,3)*SPP(6) - OP(3,3)*SPP(11) + OP(10,3)*SPP(21)) + SPP(21)*(OP(1,10)*SPP(5) + OP(2,10)*SPP(6) - OP(3,10)*SPP(11) + OP(10,10)*SPP(21));
nextP(1,2) = SPP(4)*(OP(1,2)*SPP(5) + OP(2,2)*SPP(6) - OP(3,2)*SPP(11) + OP(10,2)*SPP(21)) - SPP(3)*(OP(1,1)*SPP(5) + OP(2,1)*SPP(6) - OP(3,1)*SPP(11) + OP(10,1)*SPP(21)) + SPP(10)*(OP(1,3)*SPP(5) + OP(2,3)*SPP(6) - OP(3,3)*SPP(11) + OP(10,3)*SPP(21)) + SPP(21)*(OP(1,11)*SPP(5) + OP(2,11)*SPP(6) - OP(3,11)*SPP(11) + OP(10,11)*SPP(21));
nextP(1,3) = SPP(1)*(OP(1,1)*SPP(5) + OP(2,1)*SPP(6) - OP(3,1)*SPP(11) + OP(10,1)*SPP(21)) - SPP(2)*(OP(1,2)*SPP(5) + OP(2,2)*SPP(6) - OP(3,2)*SPP(11) + OP(10,2)*SPP(21)) + SPP(9)*(OP(1,3)*SPP(5) + OP(2,3)*SPP(6) - OP(3,3)*SPP(11) + OP(10,3)*SPP(21)) + SPP(21)*(OP(1,12)*SPP(5) + OP(2,12)*SPP(6) - OP(3,12)*SPP(11) + OP(10,12)*SPP(21));
nextP(1,4) = OP(1,4)*SPP(5) + OP(2,4)*SPP(6) - OP(3,4)*SPP(11) + OP(10,4)*SPP(21) + SPP(8)*(OP(1,1)*SPP(5) + OP(2,1)*SPP(6) - OP(3,1)*SPP(11) + OP(10,1)*SPP(21)) - SPP(17)*(OP(1,3)*SPP(5) + OP(2,3)*SPP(6) - OP(3,3)*SPP(11) + OP(10,3)*SPP(21)) - SPP(20)*(OP(1,13)*SPP(5) + OP(2,13)*SPP(6) - OP(3,13)*SPP(11) + OP(10,13)*SPP(21)) + (SF(17)*SF(21) - dvx*SPP(20))*(OP(1,2)*SPP(5) + OP(2,2)*SPP(6) - OP(3,2)*SPP(11) + OP(10,2)*SPP(21));
nextP(1,5) = OP(1,5)*SPP(5) + OP(2,5)*SPP(6) - OP(3,5)*SPP(11) + OP(10,5)*SPP(21) + SF(20)*(OP(1,13)*SPP(5) + OP(2,13)*SPP(6) - OP(3,13)*SPP(11) + OP(10,13)*SPP(21)) - SPP(19)*(OP(1,1)*SPP(5) + OP(2,1)*SPP(6) - OP(3,1)*SPP(11) + OP(10,1)*SPP(21)) + SPP(16)*(OP(1,2)*SPP(5) + OP(2,2)*SPP(6) - OP(3,2)*SPP(11) + OP(10,2)*SPP(21)) + SPP(15)*(OP(1,3)*SPP(5) + OP(2,3)*SPP(6) - OP(3,3)*SPP(11) + OP(10,3)*SPP(21));
nextP(1,6) = OP(1,6)*SPP(5) + OP(2,6)*SPP(6) - OP(3,6)*SPP(11) + OP(10,6)*SPP(21) + SPP(13)*(OP(1,1)*SPP(5) + OP(2,1)*SPP(6) - OP(3,1)*SPP(11) + OP(10,1)*SPP(21)) + SPP(7)*(OP(1,3)*SPP(5) + OP(2,3)*SPP(6) - OP(3,3)*SPP(11) + OP(10,3)*SPP(21)) - SPP(12)*(OP(1,2)*SPP(5) + OP(2,2)*SPP(6) - OP(3,2)*SPP(11) + OP(10,2)*SPP(21)) - SPP(14)*(OP(1,13)*SPP(5) + OP(2,13)*SPP(6) - OP(3,13)*SPP(11) + OP(10,13)*SPP(21));
nextP(1,7) = OP(1,7)*SPP(5) + OP(2,7)*SPP(6) - OP(3,7)*SPP(11) + OP(10,7)*SPP(21) + dt*(OP(1,4)*SPP(5) + OP(2,4)*SPP(6) - OP(3,4)*SPP(11) + OP(10,4)*SPP(21));
nextP(1,8) = OP(1,8)*SPP(5) + OP(2,8)*SPP(6) - OP(3,8)*SPP(11) + OP(10,8)*SPP(21) + dt*(OP(1,5)*SPP(5) + OP(2,5)*SPP(6) - OP(3,5)*SPP(11) + OP(10,5)*SPP(21));
nextP(1,9) = OP(1,9)*SPP(5) + OP(2,9)*SPP(6) - OP(3,9)*SPP(11) + OP(10,9)*SPP(21) + dt*(OP(1,6)*SPP(5) + OP(2,6)*SPP(6) - OP(3,6)*SPP(11) + OP(10,6)*SPP(21));
nextP(1,10) = OP(1,10)*SPP(5) + OP(2,10)*SPP(6) - OP(3,10)*SPP(11) + OP(10,10)*SPP(21);
nextP(1,11) = OP(1,11)*SPP(5) + OP(2,11)*SPP(6) - OP(3,11)*SPP(11) + OP(10,11)*SPP(21);
nextP(1,12) = OP(1,12)*SPP(5) + OP(2,12)*SPP(6) - OP(3,12)*SPP(11) + OP(10,12)*SPP(21);
nextP(1,13) = OP(1,13)*SPP(5) + OP(2,13)*SPP(6) - OP(3,13)*SPP(11) + OP(10,13)*SPP(21);
nextP(1,14) = OP(1,14)*SPP(5) + OP(2,14)*SPP(6) - OP(3,14)*SPP(11) + OP(10,14)*SPP(21);
nextP(1,15) = OP(1,15)*SPP(5) + OP(2,15)*SPP(6) - OP(3,15)*SPP(11) + OP(10,15)*SPP(21);
nextP(1,16) = OP(1,16)*SPP(5) + OP(2,16)*SPP(6) - OP(3,16)*SPP(11) + OP(10,16)*SPP(21);
nextP(1,17) = OP(1,17)*SPP(5) + OP(2,17)*SPP(6) - OP(3,17)*SPP(11) + OP(10,17)*SPP(21);
nextP(1,18) = OP(1,18)*SPP(5) + OP(2,18)*SPP(6) - OP(3,18)*SPP(11) + OP(10,18)*SPP(21);
nextP(1,19) = OP(1,19)*SPP(5) + OP(2,19)*SPP(6) - OP(3,19)*SPP(11) + OP(10,19)*SPP(21);
nextP(1,20) = OP(1,20)*SPP(5) + OP(2,20)*SPP(6) - OP(3,20)*SPP(11) + OP(10,20)*SPP(21);
nextP(1,21) = OP(1,21)*SPP(5) + OP(2,21)*SPP(6) - OP(3,21)*SPP(11) + OP(10,21)*SPP(21);
nextP(2,1) = SPP(5)*(OP(2,1)*SPP(4) - OP(1,1)*SPP(3) + OP(3,1)*SPP(10) + OP(11,1)*SPP(21)) + SPP(6)*(OP(2,2)*SPP(4) - OP(1,2)*SPP(3) + OP(3,2)*SPP(10) + OP(11,2)*SPP(21)) - SPP(11)*(OP(2,3)*SPP(4) - OP(1,3)*SPP(3) + OP(3,3)*SPP(10) + OP(11,3)*SPP(21)) + SPP(21)*(OP(2,10)*SPP(4) - OP(1,10)*SPP(3) + OP(3,10)*SPP(10) + OP(11,10)*SPP(21));
nextP(2,2) = dayNoise*SQ(4) - SPP(3)*(OP(2,1)*SPP(4) - OP(1,1)*SPP(3) + OP(3,1)*SPP(10) + OP(11,1)*SPP(21)) + SPP(4)*(OP(2,2)*SPP(4) - OP(1,2)*SPP(3) + OP(3,2)*SPP(10) + OP(11,2)*SPP(21)) + SPP(10)*(OP(2,3)*SPP(4) - OP(1,3)*SPP(3) + OP(3,3)*SPP(10) + OP(11,3)*SPP(21)) + SPP(21)*(OP(2,11)*SPP(4) - OP(1,11)*SPP(3) + OP(3,11)*SPP(10) + OP(11,11)*SPP(21));
nextP(2,3) = SPP(1)*(OP(2,1)*SPP(4) - OP(1,1)*SPP(3) + OP(3,1)*SPP(10) + OP(11,1)*SPP(21)) - SPP(2)*(OP(2,2)*SPP(4) - OP(1,2)*SPP(3) + OP(3,2)*SPP(10) + OP(11,2)*SPP(21)) + SPP(9)*(OP(2,3)*SPP(4) - OP(1,3)*SPP(3) + OP(3,3)*SPP(10) + OP(11,3)*SPP(21)) + SPP(21)*(OP(2,12)*SPP(4) - OP(1,12)*SPP(3) + OP(3,12)*SPP(10) + OP(11,12)*SPP(21));
nextP(2,4) = OP(2,4)*SPP(4) - OP(1,4)*SPP(3) + OP(3,4)*SPP(10) + OP(11,4)*SPP(21) + SPP(8)*(OP(2,1)*SPP(4) - OP(1,1)*SPP(3) + OP(3,1)*SPP(10) + OP(11,1)*SPP(21)) - SPP(17)*(OP(2,3)*SPP(4) - OP(1,3)*SPP(3) + OP(3,3)*SPP(10) + OP(11,3)*SPP(21)) - SPP(20)*(OP(2,13)*SPP(4) - OP(1,13)*SPP(3) + OP(3,13)*SPP(10) + OP(11,13)*SPP(21)) + (SF(17)*SF(21) - dvx*SPP(20))*(OP(2,2)*SPP(4) - OP(1,2)*SPP(3) + OP(3,2)*SPP(10) + OP(11,2)*SPP(21));
nextP(2,5) = OP(2,5)*SPP(4) - OP(1,5)*SPP(3) + OP(3,5)*SPP(10) + OP(11,5)*SPP(21) + SF(20)*(OP(2,13)*SPP(4) - OP(1,13)*SPP(3) + OP(3,13)*SPP(10) + OP(11,13)*SPP(21)) - SPP(19)*(OP(2,1)*SPP(4) - OP(1,1)*SPP(3) + OP(3,1)*SPP(10) + OP(11,1)*SPP(21)) + SPP(16)*(OP(2,2)*SPP(4) - OP(1,2)*SPP(3) + OP(3,2)*SPP(10) + OP(11,2)*SPP(21)) + SPP(15)*(OP(2,3)*SPP(4) - OP(1,3)*SPP(3) + OP(3,3)*SPP(10) + OP(11,3)*SPP(21));
nextP(2,6) = OP(2,6)*SPP(4) - OP(1,6)*SPP(3) + OP(3,6)*SPP(10) + OP(11,6)*SPP(21) + SPP(13)*(OP(2,1)*SPP(4) - OP(1,1)*SPP(3) + OP(3,1)*SPP(10) + OP(11,1)*SPP(21)) + SPP(7)*(OP(2,3)*SPP(4) - OP(1,3)*SPP(3) + OP(3,3)*SPP(10) + OP(11,3)*SPP(21)) - SPP(12)*(OP(2,2)*SPP(4) - OP(1,2)*SPP(3) + OP(3,2)*SPP(10) + OP(11,2)*SPP(21)) - SPP(14)*(OP(2,13)*SPP(4) - OP(1,13)*SPP(3) + OP(3,13)*SPP(10) + OP(11,13)*SPP(21));
nextP(2,7) = OP(2,7)*SPP(4) - OP(1,7)*SPP(3) + OP(3,7)*SPP(10) + OP(11,7)*SPP(21) + dt*(OP(2,4)*SPP(4) - OP(1,4)*SPP(3) + OP(3,4)*SPP(10) + OP(11,4)*SPP(21));
nextP(2,8) = OP(2,8)*SPP(4) - OP(1,8)*SPP(3) + OP(3,8)*SPP(10) + OP(11,8)*SPP(21) + dt*(OP(2,5)*SPP(4) - OP(1,5)*SPP(3) + OP(3,5)*SPP(10) + OP(11,5)*SPP(21));
nextP(2,9) = OP(2,9)*SPP(4) - OP(1,9)*SPP(3) + OP(3,9)*SPP(10) + OP(11,9)*SPP(21) + dt*(OP(2,6)*SPP(4) - OP(1,6)*SPP(3) + OP(3,6)*SPP(10) + OP(11,6)*SPP(21));
nextP(2,10) = OP(2,10)*SPP(4) - OP(1,10)*SPP(3) + OP(3,10)*SPP(10) + OP(11,10)*SPP(21);
nextP(2,11) = OP(2,11)*SPP(4) - OP(1,11)*SPP(3) + OP(3,11)*SPP(10) + OP(11,11)*SPP(21);
nextP(2,12) = OP(2,12)*SPP(4) - OP(1,12)*SPP(3) + OP(3,12)*SPP(10) + OP(11,12)*SPP(21);
nextP(2,13) = OP(2,13)*SPP(4) - OP(1,13)*SPP(3) + OP(3,13)*SPP(10) + OP(11,13)*SPP(21);
nextP(2,14) = OP(2,14)*SPP(4) - OP(1,14)*SPP(3) + OP(3,14)*SPP(10) + OP(11,14)*SPP(21);
nextP(2,15) = OP(2,15)*SPP(4) - OP(1,15)*SPP(3) + OP(3,15)*SPP(10) + OP(11,15)*SPP(21);
nextP(2,16) = OP(2,16)*SPP(4) - OP(1,16)*SPP(3) + OP(3,16)*SPP(10) + OP(11,16)*SPP(21);
nextP(2,17) = OP(2,17)*SPP(4) - OP(1,17)*SPP(3) + OP(3,17)*SPP(10) + OP(11,17)*SPP(21);
nextP(2,18) = OP(2,18)*SPP(4) - OP(1,18)*SPP(3) + OP(3,18)*SPP(10) + OP(11,18)*SPP(21);
nextP(2,19) = OP(2,19)*SPP(4) - OP(1,19)*SPP(3) + OP(3,19)*SPP(10) + OP(11,19)*SPP(21);
nextP(2,20) = OP(2,20)*SPP(4) - OP(1,20)*SPP(3) + OP(3,20)*SPP(10) + OP(11,20)*SPP(21);
nextP(2,21) = OP(2,21)*SPP(4) - OP(1,21)*SPP(3) + OP(3,21)*SPP(10) + OP(11,21)*SPP(21);
nextP(3,1) = SPP(5)*(OP(1,1)*SPP(1) - OP(2,1)*SPP(2) + OP(3,1)*SPP(9) + OP(12,1)*SPP(21)) + SPP(6)*(OP(1,2)*SPP(1) - OP(2,2)*SPP(2) + OP(3,2)*SPP(9) + OP(12,2)*SPP(21)) - SPP(11)*(OP(1,3)*SPP(1) - OP(2,3)*SPP(2) + OP(3,3)*SPP(9) + OP(12,3)*SPP(21)) + SPP(21)*(OP(1,10)*SPP(1) - OP(2,10)*SPP(2) + OP(3,10)*SPP(9) + OP(12,10)*SPP(21));
nextP(3,2) = SPP(4)*(OP(1,2)*SPP(1) - OP(2,2)*SPP(2) + OP(3,2)*SPP(9) + OP(12,2)*SPP(21)) - SPP(3)*(OP(1,1)*SPP(1) - OP(2,1)*SPP(2) + OP(3,1)*SPP(9) + OP(12,1)*SPP(21)) + SPP(10)*(OP(1,3)*SPP(1) - OP(2,3)*SPP(2) + OP(3,3)*SPP(9) + OP(12,3)*SPP(21)) + SPP(21)*(OP(1,11)*SPP(1) - OP(2,11)*SPP(2) + OP(3,11)*SPP(9) + OP(12,11)*SPP(21));
nextP(3,3) = dazNoise*SQ(4) + SPP(1)*(OP(1,1)*SPP(1) - OP(2,1)*SPP(2) + OP(3,1)*SPP(9) + OP(12,1)*SPP(21)) - SPP(2)*(OP(1,2)*SPP(1) - OP(2,2)*SPP(2) + OP(3,2)*SPP(9) + OP(12,2)*SPP(21)) + SPP(9)*(OP(1,3)*SPP(1) - OP(2,3)*SPP(2) + OP(3,3)*SPP(9) + OP(12,3)*SPP(21)) + SPP(21)*(OP(1,12)*SPP(1) - OP(2,12)*SPP(2) + OP(3,12)*SPP(9) + OP(12,12)*SPP(21));
nextP(3,4) = OP(1,4)*SPP(1) - OP(2,4)*SPP(2) + OP(3,4)*SPP(9) + OP(12,4)*SPP(21) + SPP(8)*(OP(1,1)*SPP(1) - OP(2,1)*SPP(2) + OP(3,1)*SPP(9) + OP(12,1)*SPP(21)) - SPP(17)*(OP(1,3)*SPP(1) - OP(2,3)*SPP(2) + OP(3,3)*SPP(9) + OP(12,3)*SPP(21)) - SPP(20)*(OP(1,13)*SPP(1) - OP(2,13)*SPP(2) + OP(3,13)*SPP(9) + OP(12,13)*SPP(21)) + (SF(17)*SF(21) - dvx*SPP(20))*(OP(1,2)*SPP(1) - OP(2,2)*SPP(2) + OP(3,2)*SPP(9) + OP(12,2)*SPP(21));
nextP(3,5) = OP(1,5)*SPP(1) - OP(2,5)*SPP(2) + OP(3,5)*SPP(9) + OP(12,5)*SPP(21) + SF(20)*(OP(1,13)*SPP(1) - OP(2,13)*SPP(2) + OP(3,13)*SPP(9) + OP(12,13)*SPP(21)) - SPP(19)*(OP(1,1)*SPP(1) - OP(2,1)*SPP(2) + OP(3,1)*SPP(9) + OP(12,1)*SPP(21)) + SPP(16)*(OP(1,2)*SPP(1) - OP(2,2)*SPP(2) + OP(3,2)*SPP(9) + OP(12,2)*SPP(21)) + SPP(15)*(OP(1,3)*SPP(1) - OP(2,3)*SPP(2) + OP(3,3)*SPP(9) + OP(12,3)*SPP(21));
nextP(3,6) = OP(1,6)*SPP(1) - OP(2,6)*SPP(2) + OP(3,6)*SPP(9) + OP(12,6)*SPP(21) + SPP(13)*(OP(1,1)*SPP(1) - OP(2,1)*SPP(2) + OP(3,1)*SPP(9) + OP(12,1)*SPP(21)) + SPP(7)*(OP(1,3)*SPP(1) - OP(2,3)*SPP(2) + OP(3,3)*SPP(9) + OP(12,3)*SPP(21)) - SPP(12)*(OP(1,2)*SPP(1) - OP(2,2)*SPP(2) + OP(3,2)*SPP(9) + OP(12,2)*SPP(21)) - SPP(14)*(OP(1,13)*SPP(1) - OP(2,13)*SPP(2) + OP(3,13)*SPP(9) + OP(12,13)*SPP(21));
nextP(3,7) = OP(1,7)*SPP(1) - OP(2,7)*SPP(2) + OP(3,7)*SPP(9) + OP(12,7)*SPP(21) + dt*(OP(1,4)*SPP(1) - OP(2,4)*SPP(2) + OP(3,4)*SPP(9) + OP(12,4)*SPP(21));
nextP(3,8) = OP(1,8)*SPP(1) - OP(2,8)*SPP(2) + OP(3,8)*SPP(9) + OP(12,8)*SPP(21) + dt*(OP(1,5)*SPP(1) - OP(2,5)*SPP(2) + OP(3,5)*SPP(9) + OP(12,5)*SPP(21));
nextP(3,9) = OP(1,9)*SPP(1) - OP(2,9)*SPP(2) + OP(3,9)*SPP(9) + OP(12,9)*SPP(21) + dt*(OP(1,6)*SPP(1) - OP(2,6)*SPP(2) + OP(3,6)*SPP(9) + OP(12,6)*SPP(21));
nextP(3,10) = OP(1,10)*SPP(1) - OP(2,10)*SPP(2) + OP(3,10)*SPP(9) + OP(12,10)*SPP(21);
nextP(3,11) = OP(1,11)*SPP(1) - OP(2,11)*SPP(2) + OP(3,11)*SPP(9) + OP(12,11)*SPP(21);
nextP(3,12) = OP(1,12)*SPP(1) - OP(2,12)*SPP(2) + OP(3,12)*SPP(9) + OP(12,12)*SPP(21);
nextP(3,13) = OP(1,13)*SPP(1) - OP(2,13)*SPP(2) + OP(3,13)*SPP(9) + OP(12,13)*SPP(21);
nextP(3,14) = OP(1,14)*SPP(1) - OP(2,14)*SPP(2) + OP(3,14)*SPP(9) + OP(12,14)*SPP(21);
nextP(3,15) = OP(1,15)*SPP(1) - OP(2,15)*SPP(2) + OP(3,15)*SPP(9) + OP(12,15)*SPP(21);
nextP(3,16) = OP(1,16)*SPP(1) - OP(2,16)*SPP(2) + OP(3,16)*SPP(9) + OP(12,16)*SPP(21);
nextP(3,17) = OP(1,17)*SPP(1) - OP(2,17)*SPP(2) + OP(3,17)*SPP(9) + OP(12,17)*SPP(21);
nextP(3,18) = OP(1,18)*SPP(1) - OP(2,18)*SPP(2) + OP(3,18)*SPP(9) + OP(12,18)*SPP(21);
nextP(3,19) = OP(1,19)*SPP(1) - OP(2,19)*SPP(2) + OP(3,19)*SPP(9) + OP(12,19)*SPP(21);
nextP(3,20) = OP(1,20)*SPP(1) - OP(2,20)*SPP(2) + OP(3,20)*SPP(9) + OP(12,20)*SPP(21);
nextP(3,21) = OP(1,21)*SPP(1) - OP(2,21)*SPP(2) + OP(3,21)*SPP(9) + OP(12,21)*SPP(21);
nextP(4,1) = SPP(5)*(OP(4,1) + OP(1,1)*SPP(8) - OP(3,1)*SPP(17) - OP(13,1)*SPP(20) + OP(2,1)*(SF(17)*SF(21) - dvx*SPP(20))) + SPP(6)*(OP(4,2) + OP(1,2)*SPP(8) - OP(3,2)*SPP(17) - OP(13,2)*SPP(20) + OP(2,2)*(SF(17)*SF(21) - dvx*SPP(20))) - SPP(11)*(OP(4,3) + OP(1,3)*SPP(8) - OP(3,3)*SPP(17) - OP(13,3)*SPP(20) + OP(2,3)*(SF(17)*SF(21) - dvx*SPP(20))) + SPP(21)*(OP(4,10) + OP(1,10)*SPP(8) - OP(3,10)*SPP(17) - OP(13,10)*SPP(20) + OP(2,10)*(SF(17)*SF(21) - dvx*SPP(20)));
nextP(4,2) = SPP(4)*(OP(4,2) + OP(1,2)*SPP(8) - OP(3,2)*SPP(17) - OP(13,2)*SPP(20) + OP(2,2)*(SF(17)*SF(21) - dvx*SPP(20))) - SPP(3)*(OP(4,1) + OP(1,1)*SPP(8) - OP(3,1)*SPP(17) - OP(13,1)*SPP(20) + OP(2,1)*(SF(17)*SF(21) - dvx*SPP(20))) + SPP(10)*(OP(4,3) + OP(1,3)*SPP(8) - OP(3,3)*SPP(17) - OP(13,3)*SPP(20) + OP(2,3)*(SF(17)*SF(21) - dvx*SPP(20))) + SPP(21)*(OP(4,11) + OP(1,11)*SPP(8) - OP(3,11)*SPP(17) - OP(13,11)*SPP(20) + OP(2,11)*(SF(17)*SF(21) - dvx*SPP(20)));
nextP(4,3) = SPP(1)*(OP(4,1) + OP(1,1)*SPP(8) - OP(3,1)*SPP(17) - OP(13,1)*SPP(20) + OP(2,1)*(SF(17)*SF(21) - dvx*SPP(20))) - SPP(2)*(OP(4,2) + OP(1,2)*SPP(8) - OP(3,2)*SPP(17) - OP(13,2)*SPP(20) + OP(2,2)*(SF(17)*SF(21) - dvx*SPP(20))) + SPP(9)*(OP(4,3) + OP(1,3)*SPP(8) - OP(3,3)*SPP(17) - OP(13,3)*SPP(20) + OP(2,3)*(SF(17)*SF(21) - dvx*SPP(20))) + SPP(21)*(OP(4,12) + OP(1,12)*SPP(8) - OP(3,12)*SPP(17) - OP(13,12)*SPP(20) + OP(2,12)*(SF(17)*SF(21) - dvx*SPP(20)));
nextP(4,4) = OP(4,4) + OP(1,4)*SPP(8) + OP(2,4)*SPP(18) - OP(3,4)*SPP(17) - OP(13,4)*SPP(20) + dvyNoise*(SQ(7) - 2*q0*q3)^2 + dvzNoise*(SQ(6) + 2*q0*q2)^2 + SPP(8)*(OP(4,1) + OP(1,1)*SPP(8) + OP(2,1)*SPP(18) - OP(3,1)*SPP(17) - OP(13,1)*SPP(20)) + SPP(18)*(OP(4,2) + OP(1,2)*SPP(8) + OP(2,2)*SPP(18) - OP(3,2)*SPP(17) - OP(13,2)*SPP(20)) - SPP(17)*(OP(4,3) + OP(1,3)*SPP(8) + OP(2,3)*SPP(18) - OP(3,3)*SPP(17) - OP(13,3)*SPP(20)) + dvxNoise*(SG(2) + SG(3) - SG(4) - SQ(8))^2 - SPP(20)*(OP(4,13) + OP(1,13)*SPP(8) - OP(3,13)*SPP(17) - OP(13,13)*SPP(20) + OP(2,13)*(SF(17)*SF(21) - dvx*SPP(20)));
nextP(4,5) = OP(4,5) + SQ(3) + OP(1,5)*SPP(8) + OP(2,5)*SPP(18) - OP(3,5)*SPP(17) - OP(13,5)*SPP(20) + SF(20)*(OP(4,13) + OP(1,13)*SPP(8) + OP(2,13)*SPP(18) - OP(3,13)*SPP(17) - OP(13,13)*SPP(20)) - SPP(19)*(OP(4,1) + OP(1,1)*SPP(8) + OP(2,1)*SPP(18) - OP(3,1)*SPP(17) - OP(13,1)*SPP(20)) + SPP(16)*(OP(4,2) + OP(1,2)*SPP(8) + OP(2,2)*SPP(18) - OP(3,2)*SPP(17) - OP(13,2)*SPP(20)) + SPP(15)*(OP(4,3) + OP(1,3)*SPP(8) + OP(2,3)*SPP(18) - OP(3,3)*SPP(17) - OP(13,3)*SPP(20));
nextP(4,6) = OP(4,6) + SQ(2) + OP(1,6)*SPP(8) + OP(2,6)*SPP(18) - OP(3,6)*SPP(17) - OP(13,6)*SPP(20) + SPP(13)*(OP(4,1) + OP(1,1)*SPP(8) + OP(2,1)*SPP(18) - OP(3,1)*SPP(17) - OP(13,1)*SPP(20)) + SPP(7)*(OP(4,3) + OP(1,3)*SPP(8) + OP(2,3)*SPP(18) - OP(3,3)*SPP(17) - OP(13,3)*SPP(20)) - SPP(12)*(OP(4,2) + OP(1,2)*SPP(8) + OP(2,2)*SPP(18) - OP(3,2)*SPP(17) - OP(13,2)*SPP(20)) - SPP(14)*(OP(4,13) + OP(1,13)*SPP(8) + OP(2,13)*SPP(18) - OP(3,13)*SPP(17) - OP(13,13)*SPP(20));
nextP(4,7) = OP(4,7) + OP(1,7)*SPP(8) + OP(2,7)*SPP(18) - OP(3,7)*SPP(17) - OP(13,7)*SPP(20) + dt*(OP(4,4) + OP(1,4)*SPP(8) + OP(2,4)*SPP(18) - OP(3,4)*SPP(17) - OP(13,4)*SPP(20));
nextP(4,8) = OP(4,8) + OP(1,8)*SPP(8) + OP(2,8)*SPP(18) - OP(3,8)*SPP(17) - OP(13,8)*SPP(20) + dt*(OP(4,5) + OP(1,5)*SPP(8) + OP(2,5)*SPP(18) - OP(3,5)*SPP(17) - OP(13,5)*SPP(20));
nextP(4,9) = OP(4,9) + OP(1,9)*SPP(8) + OP(2,9)*SPP(18) - OP(3,9)*SPP(17) - OP(13,9)*SPP(20) + dt*(OP(4,6) + OP(1,6)*SPP(8) + OP(2,6)*SPP(18) - OP(3,6)*SPP(17) - OP(13,6)*SPP(20));
nextP(4,10) = OP(4,10) + OP(1,10)*SPP(8) + OP(2,10)*SPP(18) - OP(3,10)*SPP(17) - OP(13,10)*SPP(20);
nextP(4,11) = OP(4,11) + OP(1,11)*SPP(8) + OP(2,11)*SPP(18) - OP(3,11)*SPP(17) - OP(13,11)*SPP(20);
nextP(4,12) = OP(4,12) + OP(1,12)*SPP(8) + OP(2,12)*SPP(18) - OP(3,12)*SPP(17) - OP(13,12)*SPP(20);
nextP(4,13) = OP(4,13) + OP(1,13)*SPP(8) + OP(2,13)*SPP(18) - OP(3,13)*SPP(17) - OP(13,13)*SPP(20);
nextP(4,14) = OP(4,14) + OP(1,14)*SPP(8) + OP(2,14)*SPP(18) - OP(3,14)*SPP(17) - OP(13,14)*SPP(20);
nextP(4,15) = OP(4,15) + OP(1,15)*SPP(8) + OP(2,15)*SPP(18) - OP(3,15)*SPP(17) - OP(13,15)*SPP(20);
nextP(4,16) = OP(4,16) + OP(1,16)*SPP(8) + OP(2,16)*SPP(18) - OP(3,16)*SPP(17) - OP(13,16)*SPP(20);
nextP(4,17) = OP(4,17) + OP(1,17)*SPP(8) + OP(2,17)*SPP(18) - OP(3,17)*SPP(17) - OP(13,17)*SPP(20);
nextP(4,18) = OP(4,18) + OP(1,18)*SPP(8) + OP(2,18)*SPP(18) - OP(3,18)*SPP(17) - OP(13,18)*SPP(20);
nextP(4,19) = OP(4,19) + OP(1,19)*SPP(8) + OP(2,19)*SPP(18) - OP(3,19)*SPP(17) - OP(13,19)*SPP(20);
nextP(4,20) = OP(4,20) + OP(1,20)*SPP(8) + OP(2,20)*SPP(18) - OP(3,20)*SPP(17) - OP(13,20)*SPP(20);
nextP(4,21) = OP(4,21) + OP(1,21)*SPP(8) + OP(2,21)*SPP(18) - OP(3,21)*SPP(17) - OP(13,21)*SPP(20);
nextP(5,1) = SPP(5)*(OP(5,1) + OP(13,1)*SF(20) - OP(1,1)*SPP(19) + OP(2,1)*SPP(16) + OP(3,1)*SPP(15)) + SPP(6)*(OP(5,2) + OP(13,2)*SF(20) - OP(1,2)*SPP(19) + OP(2,2)*SPP(16) + OP(3,2)*SPP(15)) - SPP(11)*(OP(5,3) + OP(13,3)*SF(20) - OP(1,3)*SPP(19) + OP(2,3)*SPP(16) + OP(3,3)*SPP(15)) + SPP(21)*(OP(5,10) + OP(13,10)*SF(20) - OP(1,10)*SPP(19) + OP(2,10)*SPP(16) + OP(3,10)*SPP(15));
nextP(5,2) = SPP(4)*(OP(5,2) + OP(13,2)*SF(20) - OP(1,2)*SPP(19) + OP(2,2)*SPP(16) + OP(3,2)*SPP(15)) - SPP(3)*(OP(5,1) + OP(13,1)*SF(20) - OP(1,1)*SPP(19) + OP(2,1)*SPP(16) + OP(3,1)*SPP(15)) + SPP(10)*(OP(5,3) + OP(13,3)*SF(20) - OP(1,3)*SPP(19) + OP(2,3)*SPP(16) + OP(3,3)*SPP(15)) + SPP(21)*(OP(5,11) + OP(13,11)*SF(20) - OP(1,11)*SPP(19) + OP(2,11)*SPP(16) + OP(3,11)*SPP(15));
nextP(5,3) = SPP(1)*(OP(5,1) + OP(13,1)*SF(20) - OP(1,1)*SPP(19) + OP(2,1)*SPP(16) + OP(3,1)*SPP(15)) - SPP(2)*(OP(5,2) + OP(13,2)*SF(20) - OP(1,2)*SPP(19) + OP(2,2)*SPP(16) + OP(3,2)*SPP(15)) + SPP(9)*(OP(5,3) + OP(13,3)*SF(20) - OP(1,3)*SPP(19) + OP(2,3)*SPP(16) + OP(3,3)*SPP(15)) + SPP(21)*(OP(5,12) + OP(13,12)*SF(20) - OP(1,12)*SPP(19) + OP(2,12)*SPP(16) + OP(3,12)*SPP(15));
nextP(5,4) = OP(5,4) + SQ(3) + OP(13,4)*SF(20) - OP(1,4)*SPP(19) + OP(2,4)*SPP(16) + OP(3,4)*SPP(15) + SPP(8)*(OP(5,1) + OP(13,1)*SF(20) - OP(1,1)*SPP(19) + OP(2,1)*SPP(16) + OP(3,1)*SPP(15)) + SPP(18)*(OP(5,2) + OP(13,2)*SF(20) - OP(1,2)*SPP(19) + OP(2,2)*SPP(16) + OP(3,2)*SPP(15)) - SPP(17)*(OP(5,3) + OP(13,3)*SF(20) - OP(1,3)*SPP(19) + OP(2,3)*SPP(16) + OP(3,3)*SPP(15)) - SPP(20)*(OP(5,13) + OP(13,13)*SF(20) - OP(1,13)*SPP(19) + OP(2,13)*SPP(16) + OP(3,13)*SPP(15));
nextP(5,5) = OP(5,5) + OP(13,5)*SF(20) - OP(1,5)*SPP(19) + OP(2,5)*SPP(16) + OP(3,5)*SPP(15) + dvxNoise*(SQ(7) + 2*q0*q3)^2 + dvzNoise*(SQ(5) - 2*q0*q1)^2 + SF(20)*(OP(5,13) + OP(13,13)*SF(20) - OP(1,13)*SPP(19) + OP(2,13)*SPP(16) + OP(3,13)*SPP(15)) - SPP(19)*(OP(5,1) + OP(13,1)*SF(20) - OP(1,1)*SPP(19) + OP(2,1)*SPP(16) + OP(3,1)*SPP(15)) + SPP(16)*(OP(5,2) + OP(13,2)*SF(20) - OP(1,2)*SPP(19) + OP(2,2)*SPP(16) + OP(3,2)*SPP(15)) + SPP(15)*(OP(5,3) + OP(13,3)*SF(20) - OP(1,3)*SPP(19) + OP(2,3)*SPP(16) + OP(3,3)*SPP(15)) + dvyNoise*(SG(2) - SG(3) + SG(4) - SQ(8))^2;
nextP(5,6) = OP(5,6) + SQ(1) + OP(13,6)*SF(20) - OP(1,6)*SPP(19) + OP(2,6)*SPP(16) + OP(3,6)*SPP(15) + SPP(13)*(OP(5,1) + OP(13,1)*SF(20) - OP(1,1)*SPP(19) + OP(2,1)*SPP(16) + OP(3,1)*SPP(15)) + SPP(7)*(OP(5,3) + OP(13,3)*SF(20) - OP(1,3)*SPP(19) + OP(2,3)*SPP(16) + OP(3,3)*SPP(15)) - SPP(12)*(OP(5,2) + OP(13,2)*SF(20) - OP(1,2)*SPP(19) + OP(2,2)*SPP(16) + OP(3,2)*SPP(15)) - SPP(14)*(OP(5,13) + OP(13,13)*SF(20) - OP(1,13)*SPP(19) + OP(2,13)*SPP(16) + OP(3,13)*SPP(15));
nextP(5,7) = OP(5,7) + OP(13,7)*SF(20) - OP(1,7)*SPP(19) + OP(2,7)*SPP(16) + OP(3,7)*SPP(15) + dt*(OP(5,4) + OP(13,4)*SF(20) - OP(1,4)*SPP(19) + OP(2,4)*SPP(16) + OP(3,4)*SPP(15));
nextP(5,8) = OP(5,8) + OP(13,8)*SF(20) - OP(1,8)*SPP(19) + OP(2,8)*SPP(16) + OP(3,8)*SPP(15) + dt*(OP(5,5) + OP(13,5)*SF(20) - OP(1,5)*SPP(19) + OP(2,5)*SPP(16) + OP(3,5)*SPP(15));
nextP(5,9) = OP(5,9) + OP(13,9)*SF(20) - OP(1,9)*SPP(19) + OP(2,9)*SPP(16) + OP(3,9)*SPP(15) + dt*(OP(5,6) + OP(13,6)*SF(20) - OP(1,6)*SPP(19) + OP(2,6)*SPP(16) + OP(3,6)*SPP(15));
nextP(5,10) = OP(5,10) + OP(13,10)*SF(20) - OP(1,10)*SPP(19) + OP(2,10)*SPP(16) + OP(3,10)*SPP(15);
nextP(5,11) = OP(5,11) + OP(13,11)*SF(20) - OP(1,11)*SPP(19) + OP(2,11)*SPP(16) + OP(3,11)*SPP(15);
nextP(5,12) = OP(5,12) + OP(13,12)*SF(20) - OP(1,12)*SPP(19) + OP(2,12)*SPP(16) + OP(3,12)*SPP(15);
nextP(5,13) = OP(5,13) + OP(13,13)*SF(20) - OP(1,13)*SPP(19) + OP(2,13)*SPP(16) + OP(3,13)*SPP(15);
nextP(5,14) = OP(5,14) + OP(13,14)*SF(20) - OP(1,14)*SPP(19) + OP(2,14)*SPP(16) + OP(3,14)*SPP(15);
nextP(5,15) = OP(5,15) + OP(13,15)*SF(20) - OP(1,15)*SPP(19) + OP(2,15)*SPP(16) + OP(3,15)*SPP(15);
nextP(5,16) = OP(5,16) + OP(13,16)*SF(20) - OP(1,16)*SPP(19) + OP(2,16)*SPP(16) + OP(3,16)*SPP(15);
nextP(5,17) = OP(5,17) + OP(13,17)*SF(20) - OP(1,17)*SPP(19) + OP(2,17)*SPP(16) + OP(3,17)*SPP(15);
nextP(5,18) = OP(5,18) + OP(13,18)*SF(20) - OP(1,18)*SPP(19) + OP(2,18)*SPP(16) + OP(3,18)*SPP(15);
nextP(5,19) = OP(5,19) + OP(13,19)*SF(20) - OP(1,19)*SPP(19) + OP(2,19)*SPP(16) + OP(3,19)*SPP(15);
nextP(5,20) = OP(5,20) + OP(13,20)*SF(20) - OP(1,20)*SPP(19) + OP(2,20)*SPP(16) + OP(3,20)*SPP(15);
nextP(5,21) = OP(5,21) + OP(13,21)*SF(20) - OP(1,21)*SPP(19) + OP(2,21)*SPP(16) + OP(3,21)*SPP(15);
nextP(6,1) = SPP(5)*(OP(6,1) + OP(1,1)*SPP(13) - OP(2,1)*SPP(12) + OP(3,1)*SPP(7) - OP(13,1)*SPP(14)) + SPP(6)*(OP(6,2) + OP(1,2)*SPP(13) - OP(2,2)*SPP(12) + OP(3,2)*SPP(7) - OP(13,2)*SPP(14)) - SPP(11)*(OP(6,3) + OP(1,3)*SPP(13) - OP(2,3)*SPP(12) + OP(3,3)*SPP(7) - OP(13,3)*SPP(14)) + SPP(21)*(OP(6,10) + OP(1,10)*SPP(13) - OP(2,10)*SPP(12) + OP(3,10)*SPP(7) - OP(13,10)*SPP(14));
nextP(6,2) = SPP(4)*(OP(6,2) + OP(1,2)*SPP(13) - OP(2,2)*SPP(12) + OP(3,2)*SPP(7) - OP(13,2)*SPP(14)) - SPP(3)*(OP(6,1) + OP(1,1)*SPP(13) - OP(2,1)*SPP(12) + OP(3,1)*SPP(7) - OP(13,1)*SPP(14)) + SPP(10)*(OP(6,3) + OP(1,3)*SPP(13) - OP(2,3)*SPP(12) + OP(3,3)*SPP(7) - OP(13,3)*SPP(14)) + SPP(21)*(OP(6,11) + OP(1,11)*SPP(13) - OP(2,11)*SPP(12) + OP(3,11)*SPP(7) - OP(13,11)*SPP(14));
nextP(6,3) = SPP(1)*(OP(6,1) + OP(1,1)*SPP(13) - OP(2,1)*SPP(12) + OP(3,1)*SPP(7) - OP(13,1)*SPP(14)) - SPP(2)*(OP(6,2) + OP(1,2)*SPP(13) - OP(2,2)*SPP(12) + OP(3,2)*SPP(7) - OP(13,2)*SPP(14)) + SPP(9)*(OP(6,3) + OP(1,3)*SPP(13) - OP(2,3)*SPP(12) + OP(3,3)*SPP(7) - OP(13,3)*SPP(14)) + SPP(21)*(OP(6,12) + OP(1,12)*SPP(13) - OP(2,12)*SPP(12) + OP(3,12)*SPP(7) - OP(13,12)*SPP(14));
nextP(6,4) = OP(6,4) + SQ(2) + OP(1,4)*SPP(13) - OP(2,4)*SPP(12) + OP(3,4)*SPP(7) - OP(13,4)*SPP(14) + SPP(8)*(OP(6,1) + OP(1,1)*SPP(13) - OP(2,1)*SPP(12) + OP(3,1)*SPP(7) - OP(13,1)*SPP(14)) + SPP(18)*(OP(6,2) + OP(1,2)*SPP(13) - OP(2,2)*SPP(12) + OP(3,2)*SPP(7) - OP(13,2)*SPP(14)) - SPP(17)*(OP(6,3) + OP(1,3)*SPP(13) - OP(2,3)*SPP(12) + OP(3,3)*SPP(7) - OP(13,3)*SPP(14)) - SPP(20)*(OP(6,13) + OP(1,13)*SPP(13) - OP(2,13)*SPP(12) + OP(3,13)*SPP(7) - OP(13,13)*SPP(14));
nextP(6,5) = OP(6,5) + SQ(1) + OP(1,5)*SPP(13) - OP(2,5)*SPP(12) + OP(3,5)*SPP(7) - OP(13,5)*SPP(14) + SF(20)*(OP(6,13) + OP(1,13)*SPP(13) - OP(2,13)*SPP(12) + OP(3,13)*SPP(7) - OP(13,13)*SPP(14)) - SPP(19)*(OP(6,1) + OP(1,1)*SPP(13) - OP(2,1)*SPP(12) + OP(3,1)*SPP(7) - OP(13,1)*SPP(14)) + SPP(16)*(OP(6,2) + OP(1,2)*SPP(13) - OP(2,2)*SPP(12) + OP(3,2)*SPP(7) - OP(13,2)*SPP(14)) + SPP(15)*(OP(6,3) + OP(1,3)*SPP(13) - OP(2,3)*SPP(12) + OP(3,3)*SPP(7) - OP(13,3)*SPP(14));
nextP(6,6) = OP(6,6) + OP(1,6)*SPP(13) - OP(2,6)*SPP(12) + OP(3,6)*SPP(7) - OP(13,6)*SPP(14) + dvxNoise*(SQ(6) - 2*q0*q2)^2 + dvyNoise*(SQ(5) + 2*q0*q1)^2 + SPP(13)*(OP(6,1) + OP(1,1)*SPP(13) - OP(2,1)*SPP(12) + OP(3,1)*SPP(7) - OP(13,1)*SPP(14)) + SPP(7)*(OP(6,3) + OP(1,3)*SPP(13) - OP(2,3)*SPP(12) + OP(3,3)*SPP(7) - OP(13,3)*SPP(14)) - SPP(12)*(OP(6,2) + OP(1,2)*SPP(13) - OP(2,2)*SPP(12) + OP(3,2)*SPP(7) - OP(13,2)*SPP(14)) - SPP(14)*(OP(6,13) + OP(1,13)*SPP(13) - OP(2,13)*SPP(12) + OP(3,13)*SPP(7) - OP(13,13)*SPP(14)) + dvzNoise*(SG(2) - SG(3) - SG(4) + SQ(8))^2;
nextP(6,7) = OP(6,7) + OP(1,7)*SPP(13) - OP(2,7)*SPP(12) + OP(3,7)*SPP(7) - OP(13,7)*SPP(14) + dt*(OP(6,4) + OP(1,4)*SPP(13) - OP(2,4)*SPP(12) + OP(3,4)*SPP(7) - OP(13,4)*SPP(14));
nextP(6,8) = OP(6,8) + OP(1,8)*SPP(13) - OP(2,8)*SPP(12) + OP(3,8)*SPP(7) - OP(13,8)*SPP(14) + dt*(OP(6,5) + OP(1,5)*SPP(13) - OP(2,5)*SPP(12) + OP(3,5)*SPP(7) - OP(13,5)*SPP(14));
nextP(6,9) = OP(6,9) + OP(1,9)*SPP(13) - OP(2,9)*SPP(12) + OP(3,9)*SPP(7) - OP(13,9)*SPP(14) + dt*(OP(6,6) + OP(1,6)*SPP(13) - OP(2,6)*SPP(12) + OP(3,6)*SPP(7) - OP(13,6)*SPP(14));
nextP(6,10) = OP(6,10) + OP(1,10)*SPP(13) - OP(2,10)*SPP(12) + OP(3,10)*SPP(7) - OP(13,10)*SPP(14);
nextP(6,11) = OP(6,11) + OP(1,11)*SPP(13) - OP(2,11)*SPP(12) + OP(3,11)*SPP(7) - OP(13,11)*SPP(14);
nextP(6,12) = OP(6,12) + OP(1,12)*SPP(13) - OP(2,12)*SPP(12) + OP(3,12)*SPP(7) - OP(13,12)*SPP(14);
nextP(6,13) = OP(6,13) + OP(1,13)*SPP(13) - OP(2,13)*SPP(12) + OP(3,13)*SPP(7) - OP(13,13)*SPP(14);
nextP(6,14) = OP(6,14) + OP(1,14)*SPP(13) - OP(2,14)*SPP(12) + OP(3,14)*SPP(7) - OP(13,14)*SPP(14);
nextP(6,15) = OP(6,15) + OP(1,15)*SPP(13) - OP(2,15)*SPP(12) + OP(3,15)*SPP(7) - OP(13,15)*SPP(14);
nextP(6,16) = OP(6,16) + OP(1,16)*SPP(13) - OP(2,16)*SPP(12) + OP(3,16)*SPP(7) - OP(13,16)*SPP(14);
nextP(6,17) = OP(6,17) + OP(1,17)*SPP(13) - OP(2,17)*SPP(12) + OP(3,17)*SPP(7) - OP(13,17)*SPP(14);
nextP(6,18) = OP(6,18) + OP(1,18)*SPP(13) - OP(2,18)*SPP(12) + OP(3,18)*SPP(7) - OP(13,18)*SPP(14);
nextP(6,19) = OP(6,19) + OP(1,19)*SPP(13) - OP(2,19)*SPP(12) + OP(3,19)*SPP(7) - OP(13,19)*SPP(14);
nextP(6,20) = OP(6,20) + OP(1,20)*SPP(13) - OP(2,20)*SPP(12) + OP(3,20)*SPP(7) - OP(13,20)*SPP(14);
nextP(6,21) = OP(6,21) + OP(1,21)*SPP(13) - OP(2,21)*SPP(12) + OP(3,21)*SPP(7) - OP(13,21)*SPP(14);
nextP(7,1) = SPP(5)*(OP(7,1) + OP(4,1)*dt) + SPP(6)*(OP(7,2) + OP(4,2)*dt) - SPP(11)*(OP(7,3) + OP(4,3)*dt) + SPP(21)*(OP(7,10) + OP(4,10)*dt);
nextP(7,2) = SPP(4)*(OP(7,2) + OP(4,2)*dt) - SPP(3)*(OP(7,1) + OP(4,1)*dt) + SPP(10)*(OP(7,3) + OP(4,3)*dt) + SPP(21)*(OP(7,11) + OP(4,11)*dt);
nextP(7,3) = SPP(1)*(OP(7,1) + OP(4,1)*dt) - SPP(2)*(OP(7,2) + OP(4,2)*dt) + SPP(9)*(OP(7,3) + OP(4,3)*dt) + SPP(21)*(OP(7,12) + OP(4,12)*dt);
nextP(7,4) = OP(7,4) + OP(4,4)*dt + SPP(8)*(OP(7,1) + OP(4,1)*dt) + SPP(18)*(OP(7,2) + OP(4,2)*dt) - SPP(17)*(OP(7,3) + OP(4,3)*dt) - SPP(20)*(OP(7,13) + OP(4,13)*dt);
nextP(7,5) = OP(7,5) + OP(4,5)*dt + SF(20)*(OP(7,13) + OP(4,13)*dt) + SPP(16)*(OP(7,2) + OP(4,2)*dt) + SPP(15)*(OP(7,3) + OP(4,3)*dt) - SPP(19)*(OP(7,1) + OP(4,1)*dt);
nextP(7,6) = OP(7,6) + OP(4,6)*dt + SPP(7)*(OP(7,3) + OP(4,3)*dt) + SPP(13)*(OP(7,1) + OP(4,1)*dt) - SPP(12)*(OP(7,2) + OP(4,2)*dt) - SPP(14)*(OP(7,13) + OP(4,13)*dt);
nextP(7,7) = OP(7,7) + OP(4,7)*dt + dt*(OP(7,4) + OP(4,4)*dt);
nextP(7,8) = OP(7,8) + OP(4,8)*dt + dt*(OP(7,5) + OP(4,5)*dt);
nextP(7,9) = OP(7,9) + OP(4,9)*dt + dt*(OP(7,6) + OP(4,6)*dt);
nextP(7,10) = OP(7,10) + OP(4,10)*dt;
nextP(7,11) = OP(7,11) + OP(4,11)*dt;
nextP(7,12) = OP(7,12) + OP(4,12)*dt;
nextP(7,13) = OP(7,13) + OP(4,13)*dt;
nextP(7,14) = OP(7,14) + OP(4,14)*dt;
nextP(7,15) = OP(7,15) + OP(4,15)*dt;
nextP(7,16) = OP(7,16) + OP(4,16)*dt;
nextP(7,17) = OP(7,17) + OP(4,17)*dt;
nextP(7,18) = OP(7,18) + OP(4,18)*dt;
nextP(7,19) = OP(7,19) + OP(4,19)*dt;
nextP(7,20) = OP(7,20) + OP(4,20)*dt;
nextP(7,21) = OP(7,21) + OP(4,21)*dt;
nextP(8,1) = SPP(5)*(OP(8,1) + OP(5,1)*dt) + SPP(6)*(OP(8,2) + OP(5,2)*dt) - SPP(11)*(OP(8,3) + OP(5,3)*dt) + SPP(21)*(OP(8,10) + OP(5,10)*dt);
nextP(8,2) = SPP(4)*(OP(8,2) + OP(5,2)*dt) - SPP(3)*(OP(8,1) + OP(5,1)*dt) + SPP(10)*(OP(8,3) + OP(5,3)*dt) + SPP(21)*(OP(8,11) + OP(5,11)*dt);
nextP(8,3) = SPP(1)*(OP(8,1) + OP(5,1)*dt) - SPP(2)*(OP(8,2) + OP(5,2)*dt) + SPP(9)*(OP(8,3) + OP(5,3)*dt) + SPP(21)*(OP(8,12) + OP(5,12)*dt);
nextP(8,4) = OP(8,4) + OP(5,4)*dt + SPP(8)*(OP(8,1) + OP(5,1)*dt) + SPP(18)*(OP(8,2) + OP(5,2)*dt) - SPP(17)*(OP(8,3) + OP(5,3)*dt) - SPP(20)*(OP(8,13) + OP(5,13)*dt);
nextP(8,5) = OP(8,5) + OP(5,5)*dt + SF(20)*(OP(8,13) + OP(5,13)*dt) + SPP(16)*(OP(8,2) + OP(5,2)*dt) + SPP(15)*(OP(8,3) + OP(5,3)*dt) - SPP(19)*(OP(8,1) + OP(5,1)*dt);
nextP(8,6) = OP(8,6) + OP(5,6)*dt + SPP(7)*(OP(8,3) + OP(5,3)*dt) + SPP(13)*(OP(8,1) + OP(5,1)*dt) - SPP(12)*(OP(8,2) + OP(5,2)*dt) - SPP(14)*(OP(8,13) + OP(5,13)*dt);
nextP(8,7) = OP(8,7) + OP(5,7)*dt + dt*(OP(8,4) + OP(5,4)*dt);
nextP(8,8) = OP(8,8) + OP(5,8)*dt + dt*(OP(8,5) + OP(5,5)*dt);
nextP(8,9) = OP(8,9) + OP(5,9)*dt + dt*(OP(8,6) + OP(5,6)*dt);
nextP(8,10) = OP(8,10) + OP(5,10)*dt;
nextP(8,11) = OP(8,11) + OP(5,11)*dt;
nextP(8,12) = OP(8,12) + OP(5,12)*dt;
nextP(8,13) = OP(8,13) + OP(5,13)*dt;
nextP(8,14) = OP(8,14) + OP(5,14)*dt;
nextP(8,15) = OP(8,15) + OP(5,15)*dt;
nextP(8,16) = OP(8,16) + OP(5,16)*dt;
nextP(8,17) = OP(8,17) + OP(5,17)*dt;
nextP(8,18) = OP(8,18) + OP(5,18)*dt;
nextP(8,19) = OP(8,19) + OP(5,19)*dt;
nextP(8,20) = OP(8,20) + OP(5,20)*dt;
nextP(8,21) = OP(8,21) + OP(5,21)*dt;
nextP(9,1) = SPP(5)*(OP(9,1) + OP(6,1)*dt) + SPP(6)*(OP(9,2) + OP(6,2)*dt) - SPP(11)*(OP(9,3) + OP(6,3)*dt) + SPP(21)*(OP(9,10) + OP(6,10)*dt);
nextP(9,2) = SPP(4)*(OP(9,2) + OP(6,2)*dt) - SPP(3)*(OP(9,1) + OP(6,1)*dt) + SPP(10)*(OP(9,3) + OP(6,3)*dt) + SPP(21)*(OP(9,11) + OP(6,11)*dt);
nextP(9,3) = SPP(1)*(OP(9,1) + OP(6,1)*dt) - SPP(2)*(OP(9,2) + OP(6,2)*dt) + SPP(9)*(OP(9,3) + OP(6,3)*dt) + SPP(21)*(OP(9,12) + OP(6,12)*dt);
nextP(9,4) = OP(9,4) + OP(6,4)*dt + SPP(8)*(OP(9,1) + OP(6,1)*dt) + SPP(18)*(OP(9,2) + OP(6,2)*dt) - SPP(17)*(OP(9,3) + OP(6,3)*dt) - SPP(20)*(OP(9,13) + OP(6,13)*dt);
nextP(9,5) = OP(9,5) + OP(6,5)*dt + SF(20)*(OP(9,13) + OP(6,13)*dt) + SPP(16)*(OP(9,2) + OP(6,2)*dt) + SPP(15)*(OP(9,3) + OP(6,3)*dt) - SPP(19)*(OP(9,1) + OP(6,1)*dt);
nextP(9,6) = OP(9,6) + OP(6,6)*dt + SPP(7)*(OP(9,3) + OP(6,3)*dt) + SPP(13)*(OP(9,1) + OP(6,1)*dt) - SPP(12)*(OP(9,2) + OP(6,2)*dt) - SPP(14)*(OP(9,13) + OP(6,13)*dt);
nextP(9,7) = OP(9,7) + OP(6,7)*dt + dt*(OP(9,4) + OP(6,4)*dt);
nextP(9,8) = OP(9,8) + OP(6,8)*dt + dt*(OP(9,5) + OP(6,5)*dt);
nextP(9,9) = OP(9,9) + OP(6,9)*dt + dt*(OP(9,6) + OP(6,6)*dt);
nextP(9,10) = OP(9,10) + OP(6,10)*dt;
nextP(9,11) = OP(9,11) + OP(6,11)*dt;
nextP(9,12) = OP(9,12) + OP(6,12)*dt;
nextP(9,13) = OP(9,13) + OP(6,13)*dt;
nextP(9,14) = OP(9,14) + OP(6,14)*dt;
nextP(9,15) = OP(9,15) + OP(6,15)*dt;
nextP(9,16) = OP(9,16) + OP(6,16)*dt;
nextP(9,17) = OP(9,17) + OP(6,17)*dt;
nextP(9,18) = OP(9,18) + OP(6,18)*dt;
nextP(9,19) = OP(9,19) + OP(6,19)*dt;
nextP(9,20) = OP(9,20) + OP(6,20)*dt;
nextP(9,21) = OP(9,21) + OP(6,21)*dt;
nextP(10,1) = OP(10,1)*SPP(5) + OP(10,2)*SPP(6) - OP(10,3)*SPP(11) + OP(10,10)*SPP(21);
nextP(10,2) = OP(10,2)*SPP(4) - OP(10,1)*SPP(3) + OP(10,3)*SPP(10) + OP(10,11)*SPP(21);
nextP(10,3) = OP(10,1)*SPP(1) - OP(10,2)*SPP(2) + OP(10,3)*SPP(9) + OP(10,12)*SPP(21);
nextP(10,4) = OP(10,4) + OP(10,1)*SPP(8) + OP(10,2)*SPP(18) - OP(10,3)*SPP(17) - OP(10,13)*SPP(20);
nextP(10,5) = OP(10,5) + OP(10,13)*SF(20) + OP(10,2)*SPP(16) + OP(10,3)*SPP(15) - OP(10,1)*SPP(19);
nextP(10,6) = OP(10,6) + OP(10,3)*SPP(7) + OP(10,1)*SPP(13) - OP(10,2)*SPP(12) - OP(10,13)*SPP(14);
nextP(10,7) = OP(10,7) + OP(10,4)*dt;
nextP(10,8) = OP(10,8) + OP(10,5)*dt;
nextP(10,9) = OP(10,9) + OP(10,6)*dt;
nextP(10,10) = OP(10,10);
nextP(10,11) = OP(10,11);
nextP(10,12) = OP(10,12);
nextP(10,13) = OP(10,13);
nextP(10,14) = OP(10,14);
nextP(10,15) = OP(10,15);
nextP(10,16) = OP(10,16);
nextP(10,17) = OP(10,17);
nextP(10,18) = OP(10,18);
nextP(10,19) = OP(10,19);
nextP(10,20) = OP(10,20);
nextP(10,21) = OP(10,21);
nextP(11,1) = OP(11,1)*SPP(5) + OP(11,2)*SPP(6) - OP(11,3)*SPP(11) + OP(11,10)*SPP(21);
nextP(11,2) = OP(11,2)*SPP(4) - OP(11,1)*SPP(3) + OP(11,3)*SPP(10) + OP(11,11)*SPP(21);
nextP(11,3) = OP(11,1)*SPP(1) - OP(11,2)*SPP(2) + OP(11,3)*SPP(9) + OP(11,12)*SPP(21);
nextP(11,4) = OP(11,4) + OP(11,1)*SPP(8) + OP(11,2)*SPP(18) - OP(11,3)*SPP(17) - OP(11,13)*SPP(20);
nextP(11,5) = OP(11,5) + OP(11,13)*SF(20) + OP(11,2)*SPP(16) + OP(11,3)*SPP(15) - OP(11,1)*SPP(19);
nextP(11,6) = OP(11,6) + OP(11,3)*SPP(7) + OP(11,1)*SPP(13) - OP(11,2)*SPP(12) - OP(11,13)*SPP(14);
nextP(11,7) = OP(11,7) + OP(11,4)*dt;
nextP(11,8) = OP(11,8) + OP(11,5)*dt;
nextP(11,9) = OP(11,9) + OP(11,6)*dt;
nextP(11,10) = OP(11,10);
nextP(11,11) = OP(11,11);
nextP(11,12) = OP(11,12);
nextP(11,13) = OP(11,13);
nextP(11,14) = OP(11,14);
nextP(11,15) = OP(11,15);
nextP(11,16) = OP(11,16);
nextP(11,17) = OP(11,17);
nextP(11,18) = OP(11,18);
nextP(11,19) = OP(11,19);
nextP(11,20) = OP(11,20);
nextP(11,21) = OP(11,21);
nextP(12,1) = OP(12,1)*SPP(5) + OP(12,2)*SPP(6) - OP(12,3)*SPP(11) + OP(12,10)*SPP(21);
nextP(12,2) = OP(12,2)*SPP(4) - OP(12,1)*SPP(3) + OP(12,3)*SPP(10) + OP(12,11)*SPP(21);
nextP(12,3) = OP(12,1)*SPP(1) - OP(12,2)*SPP(2) + OP(12,3)*SPP(9) + OP(12,12)*SPP(21);
nextP(12,4) = OP(12,4) + OP(12,1)*SPP(8) + OP(12,2)*SPP(18) - OP(12,3)*SPP(17) - OP(12,13)*SPP(20);
nextP(12,5) = OP(12,5) + OP(12,13)*SF(20) + OP(12,2)*SPP(16) + OP(12,3)*SPP(15) - OP(12,1)*SPP(19);
nextP(12,6) = OP(12,6) + OP(12,3)*SPP(7) + OP(12,1)*SPP(13) - OP(12,2)*SPP(12) - OP(12,13)*SPP(14);
nextP(12,7) = OP(12,7) + OP(12,4)*dt;
nextP(12,8) = OP(12,8) + OP(12,5)*dt;
nextP(12,9) = OP(12,9) + OP(12,6)*dt;
nextP(12,10) = OP(12,10);
nextP(12,11) = OP(12,11);
nextP(12,12) = OP(12,12);
nextP(12,13) = OP(12,13);
nextP(12,14) = OP(12,14);
nextP(12,15) = OP(12,15);
nextP(12,16) = OP(12,16);
nextP(12,17) = OP(12,17);
nextP(12,18) = OP(12,18);
nextP(12,19) = OP(12,19);
nextP(12,20) = OP(12,20);
nextP(12,21) = OP(12,21);
nextP(13,1) = OP(13,1)*SPP(5) + OP(13,2)*SPP(6) - OP(13,3)*SPP(11) + OP(13,10)*SPP(21);
nextP(13,2) = OP(13,2)*SPP(4) - OP(13,1)*SPP(3) + OP(13,3)*SPP(10) + OP(13,11)*SPP(21);
nextP(13,3) = OP(13,1)*SPP(1) - OP(13,2)*SPP(2) + OP(13,3)*SPP(9) + OP(13,12)*SPP(21);
nextP(13,4) = OP(13,4) + OP(13,1)*SPP(8) + OP(13,2)*SPP(18) - OP(13,3)*SPP(17) - OP(13,13)*SPP(20);
nextP(13,5) = OP(13,5) + OP(13,13)*SF(20) + OP(13,2)*SPP(16) + OP(13,3)*SPP(15) - OP(13,1)*SPP(19);
nextP(13,6) = OP(13,6) + OP(13,3)*SPP(7) + OP(13,1)*SPP(13) - OP(13,2)*SPP(12) - OP(13,13)*SPP(14);
nextP(13,7) = OP(13,7) + OP(13,4)*dt;
nextP(13,8) = OP(13,8) + OP(13,5)*dt;
nextP(13,9) = OP(13,9) + OP(13,6)*dt;
nextP(13,10) = OP(13,10);
nextP(13,11) = OP(13,11);
nextP(13,12) = OP(13,12);
nextP(13,13) = OP(13,13);
nextP(13,14) = OP(13,14);
nextP(13,15) = OP(13,15);
nextP(13,16) = OP(13,16);
nextP(13,17) = OP(13,17);
nextP(13,18) = OP(13,18);
nextP(13,19) = OP(13,19);
nextP(13,20) = OP(13,20);
nextP(13,21) = OP(13,21);
nextP(14,1) = OP(14,1)*SPP(5) + OP(14,2)*SPP(6) - OP(14,3)*SPP(11) + OP(14,10)*SPP(21);
nextP(14,2) = OP(14,2)*SPP(4) - OP(14,1)*SPP(3) + OP(14,3)*SPP(10) + OP(14,11)*SPP(21);
nextP(14,3) = OP(14,1)*SPP(1) - OP(14,2)*SPP(2) + OP(14,3)*SPP(9) + OP(14,12)*SPP(21);
nextP(14,4) = OP(14,4) + OP(14,1)*SPP(8) + OP(14,2)*SPP(18) - OP(14,3)*SPP(17) - OP(14,13)*SPP(20);
nextP(14,5) = OP(14,5) + OP(14,13)*SF(20) + OP(14,2)*SPP(16) + OP(14,3)*SPP(15) - OP(14,1)*SPP(19);
nextP(14,6) = OP(14,6) + OP(14,3)*SPP(7) + OP(14,1)*SPP(13) - OP(14,2)*SPP(12) - OP(14,13)*SPP(14);
nextP(14,7) = OP(14,7) + OP(14,4)*dt;
nextP(14,8) = OP(14,8) + OP(14,5)*dt;
nextP(14,9) = OP(14,9) + OP(14,6)*dt;
nextP(14,10) = OP(14,10);
nextP(14,11) = OP(14,11);
nextP(14,12) = OP(14,12);
nextP(14,13) = OP(14,13);
nextP(14,14) = OP(14,14);
nextP(14,15) = OP(14,15);
nextP(14,16) = OP(14,16);
nextP(14,17) = OP(14,17);
nextP(14,18) = OP(14,18);
nextP(14,19) = OP(14,19);
nextP(14,20) = OP(14,20);
nextP(14,21) = OP(14,21);
nextP(15,1) = OP(15,1)*SPP(5) + OP(15,2)*SPP(6) - OP(15,3)*SPP(11) + OP(15,10)*SPP(21);
nextP(15,2) = OP(15,2)*SPP(4) - OP(15,1)*SPP(3) + OP(15,3)*SPP(10) + OP(15,11)*SPP(21);
nextP(15,3) = OP(15,1)*SPP(1) - OP(15,2)*SPP(2) + OP(15,3)*SPP(9) + OP(15,12)*SPP(21);
nextP(15,4) = OP(15,4) + OP(15,1)*SPP(8) + OP(15,2)*SPP(18) - OP(15,3)*SPP(17) - OP(15,13)*SPP(20);
nextP(15,5) = OP(15,5) + OP(15,13)*SF(20) + OP(15,2)*SPP(16) + OP(15,3)*SPP(15) - OP(15,1)*SPP(19);
nextP(15,6) = OP(15,6) + OP(15,3)*SPP(7) + OP(15,1)*SPP(13) - OP(15,2)*SPP(12) - OP(15,13)*SPP(14);
nextP(15,7) = OP(15,7) + OP(15,4)*dt;
nextP(15,8) = OP(15,8) + OP(15,5)*dt;
nextP(15,9) = OP(15,9) + OP(15,6)*dt;
nextP(15,10) = OP(15,10);
nextP(15,11) = OP(15,11);
nextP(15,12) = OP(15,12);
nextP(15,13) = OP(15,13);
nextP(15,14) = OP(15,14);
nextP(15,15) = OP(15,15);
nextP(15,16) = OP(15,16);
nextP(15,17) = OP(15,17);
nextP(15,18) = OP(15,18);
nextP(15,19) = OP(15,19);
nextP(15,20) = OP(15,20);
nextP(15,21) = OP(15,21);
nextP(16,1) = OP(16,1)*SPP(5) + OP(16,2)*SPP(6) - OP(16,3)*SPP(11) + OP(16,10)*SPP(21);
nextP(16,2) = OP(16,2)*SPP(4) - OP(16,1)*SPP(3) + OP(16,3)*SPP(10) + OP(16,11)*SPP(21);
nextP(16,3) = OP(16,1)*SPP(1) - OP(16,2)*SPP(2) + OP(16,3)*SPP(9) + OP(16,12)*SPP(21);
nextP(16,4) = OP(16,4) + OP(16,1)*SPP(8) + OP(16,2)*SPP(18) - OP(16,3)*SPP(17) - OP(16,13)*SPP(20);
nextP(16,5) = OP(16,5) + OP(16,13)*SF(20) + OP(16,2)*SPP(16) + OP(16,3)*SPP(15) - OP(16,1)*SPP(19);
nextP(16,6) = OP(16,6) + OP(16,3)*SPP(7) + OP(16,1)*SPP(13) - OP(16,2)*SPP(12) - OP(16,13)*SPP(14);
nextP(16,7) = OP(16,7) + OP(16,4)*dt;
nextP(16,8) = OP(16,8) + OP(16,5)*dt;
nextP(16,9) = OP(16,9) + OP(16,6)*dt;
nextP(16,10) = OP(16,10);
nextP(16,11) = OP(16,11);
nextP(16,12) = OP(16,12);
nextP(16,13) = OP(16,13);
nextP(16,14) = OP(16,14);
nextP(16,15) = OP(16,15);
nextP(16,16) = OP(16,16);
nextP(16,17) = OP(16,17);
nextP(16,18) = OP(16,18);
nextP(16,19) = OP(16,19);
nextP(16,20) = OP(16,20);
nextP(16,21) = OP(16,21);
nextP(17,1) = OP(17,1)*SPP(5) + OP(17,2)*SPP(6) - OP(17,3)*SPP(11) + OP(17,10)*SPP(21);
nextP(17,2) = OP(17,2)*SPP(4) - OP(17,1)*SPP(3) + OP(17,3)*SPP(10) + OP(17,11)*SPP(21);
nextP(17,3) = OP(17,1)*SPP(1) - OP(17,2)*SPP(2) + OP(17,3)*SPP(9) + OP(17,12)*SPP(21);
nextP(17,4) = OP(17,4) + OP(17,1)*SPP(8) + OP(17,2)*SPP(18) - OP(17,3)*SPP(17) - OP(17,13)*SPP(20);
nextP(17,5) = OP(17,5) + OP(17,13)*SF(20) + OP(17,2)*SPP(16) + OP(17,3)*SPP(15) - OP(17,1)*SPP(19);
nextP(17,6) = OP(17,6) + OP(17,3)*SPP(7) + OP(17,1)*SPP(13) - OP(17,2)*SPP(12) - OP(17,13)*SPP(14);
nextP(17,7) = OP(17,7) + OP(17,4)*dt;
nextP(17,8) = OP(17,8) + OP(17,5)*dt;
nextP(17,9) = OP(17,9) + OP(17,6)*dt;
nextP(17,10) = OP(17,10);
nextP(17,11) = OP(17,11);
nextP(17,12) = OP(17,12);
nextP(17,13) = OP(17,13);
nextP(17,14) = OP(17,14);
nextP(17,15) = OP(17,15);
nextP(17,16) = OP(17,16);
nextP(17,17) = OP(17,17);
nextP(17,18) = OP(17,18);
nextP(17,19) = OP(17,19);
nextP(17,20) = OP(17,20);
nextP(17,21) = OP(17,21);
nextP(18,1) = OP(18,1)*SPP(5) + OP(18,2)*SPP(6) - OP(18,3)*SPP(11) + OP(18,10)*SPP(21);
nextP(18,2) = OP(18,2)*SPP(4) - OP(18,1)*SPP(3) + OP(18,3)*SPP(10) + OP(18,11)*SPP(21);
nextP(18,3) = OP(18,1)*SPP(1) - OP(18,2)*SPP(2) + OP(18,3)*SPP(9) + OP(18,12)*SPP(21);
nextP(18,4) = OP(18,4) + OP(18,1)*SPP(8) + OP(18,2)*SPP(18) - OP(18,3)*SPP(17) - OP(18,13)*SPP(20);
nextP(18,5) = OP(18,5) + OP(18,13)*SF(20) + OP(18,2)*SPP(16) + OP(18,3)*SPP(15) - OP(18,1)*SPP(19);
nextP(18,6) = OP(18,6) + OP(18,3)*SPP(7) + OP(18,1)*SPP(13) - OP(18,2)*SPP(12) - OP(18,13)*SPP(14);
nextP(18,7) = OP(18,7) + OP(18,4)*dt;
nextP(18,8) = OP(18,8) + OP(18,5)*dt;
nextP(18,9) = OP(18,9) + OP(18,6)*dt;
nextP(18,10) = OP(18,10);
nextP(18,11) = OP(18,11);
nextP(18,12) = OP(18,12);
nextP(18,13) = OP(18,13);
nextP(18,14) = OP(18,14);
nextP(18,15) = OP(18,15);
nextP(18,16) = OP(18,16);
nextP(18,17) = OP(18,17);
nextP(18,18) = OP(18,18);
nextP(18,19) = OP(18,19);
nextP(18,20) = OP(18,20);
nextP(18,21) = OP(18,21);
nextP(19,1) = OP(19,1)*SPP(5) + OP(19,2)*SPP(6) - OP(19,3)*SPP(11) + OP(19,10)*SPP(21);
nextP(19,2) = OP(19,2)*SPP(4) - OP(19,1)*SPP(3) + OP(19,3)*SPP(10) + OP(19,11)*SPP(21);
nextP(19,3) = OP(19,1)*SPP(1) - OP(19,2)*SPP(2) + OP(19,3)*SPP(9) + OP(19,12)*SPP(21);
nextP(19,4) = OP(19,4) + OP(19,1)*SPP(8) + OP(19,2)*SPP(18) - OP(19,3)*SPP(17) - OP(19,13)*SPP(20);
nextP(19,5) = OP(19,5) + OP(19,13)*SF(20) + OP(19,2)*SPP(16) + OP(19,3)*SPP(15) - OP(19,1)*SPP(19);
nextP(19,6) = OP(19,6) + OP(19,3)*SPP(7) + OP(19,1)*SPP(13) - OP(19,2)*SPP(12) - OP(19,13)*SPP(14);
nextP(19,7) = OP(19,7) + OP(19,4)*dt;
nextP(19,8) = OP(19,8) + OP(19,5)*dt;
nextP(19,9) = OP(19,9) + OP(19,6)*dt;
nextP(19,10) = OP(19,10);
nextP(19,11) = OP(19,11);
nextP(19,12) = OP(19,12);
nextP(19,13) = OP(19,13);
nextP(19,14) = OP(19,14);
nextP(19,15) = OP(19,15);
nextP(19,16) = OP(19,16);
nextP(19,17) = OP(19,17);
nextP(19,18) = OP(19,18);
nextP(19,19) = OP(19,19);
nextP(19,20) = OP(19,20);
nextP(19,21) = OP(19,21);
nextP(20,1) = OP(20,1)*SPP(5) + OP(20,2)*SPP(6) - OP(20,3)*SPP(11) + OP(20,10)*SPP(21);
nextP(20,2) = OP(20,2)*SPP(4) - OP(20,1)*SPP(3) + OP(20,3)*SPP(10) + OP(20,11)*SPP(21);
nextP(20,3) = OP(20,1)*SPP(1) - OP(20,2)*SPP(2) + OP(20,3)*SPP(9) + OP(20,12)*SPP(21);
nextP(20,4) = OP(20,4) + OP(20,1)*SPP(8) + OP(20,2)*SPP(18) - OP(20,3)*SPP(17) - OP(20,13)*SPP(20);
nextP(20,5) = OP(20,5) + OP(20,13)*SF(20) + OP(20,2)*SPP(16) + OP(20,3)*SPP(15) - OP(20,1)*SPP(19);
nextP(20,6) = OP(20,6) + OP(20,3)*SPP(7) + OP(20,1)*SPP(13) - OP(20,2)*SPP(12) - OP(20,13)*SPP(14);
nextP(20,7) = OP(20,7) + OP(20,4)*dt;
nextP(20,8) = OP(20,8) + OP(20,5)*dt;
nextP(20,9) = OP(20,9) + OP(20,6)*dt;
nextP(20,10) = OP(20,10);
nextP(20,11) = OP(20,11);
nextP(20,12) = OP(20,12);
nextP(20,13) = OP(20,13);
nextP(20,14) = OP(20,14);
nextP(20,15) = OP(20,15);
nextP(20,16) = OP(20,16);
nextP(20,17) = OP(20,17);
nextP(20,18) = OP(20,18);
nextP(20,19) = OP(20,19);
nextP(20,20) = OP(20,20);
nextP(20,21) = OP(20,21);
nextP(21,1) = OP(21,1)*SPP(5) + OP(21,2)*SPP(6) - OP(21,3)*SPP(11) + OP(21,10)*SPP(21);
nextP(21,2) = OP(21,2)*SPP(4) - OP(21,1)*SPP(3) + OP(21,3)*SPP(10) + OP(21,11)*SPP(21);
nextP(21,3) = OP(21,1)*SPP(1) - OP(21,2)*SPP(2) + OP(21,3)*SPP(9) + OP(21,12)*SPP(21);
nextP(21,4) = OP(21,4) + OP(21,1)*SPP(8) + OP(21,2)*SPP(18) - OP(21,3)*SPP(17) - OP(21,13)*SPP(20);
nextP(21,5) = OP(21,5) + OP(21,13)*SF(20) + OP(21,2)*SPP(16) + OP(21,3)*SPP(15) - OP(21,1)*SPP(19);
nextP(21,6) = OP(21,6) + OP(21,3)*SPP(7) + OP(21,1)*SPP(13) - OP(21,2)*SPP(12) - OP(21,13)*SPP(14);
nextP(21,7) = OP(21,7) + OP(21,4)*dt;
nextP(21,8) = OP(21,8) + OP(21,5)*dt;
nextP(21,9) = OP(21,9) + OP(21,6)*dt;
nextP(21,10) = OP(21,10);
nextP(21,11) = OP(21,11);
nextP(21,12) = OP(21,12);
nextP(21,13) = OP(21,13);
nextP(21,14) = OP(21,14);
nextP(21,15) = OP(21,15);
nextP(21,16) = OP(21,16);
nextP(21,17) = OP(21,17);
nextP(21,18) = OP(21,18);
nextP(21,19) = OP(21,19);
nextP(21,20) = OP(21,20);
nextP(21,21) = OP(21,21);
SH_TAS = zeros(3,1);
SH_TAS(1) = 1/((ve - vwe)^2 + (vn - vwn)^2 + vd^2)^(1/2);
SH_TAS(2) = (SH_TAS(1)*(2*ve - 2*vwe))/2;
SH_TAS(3) = (SH_TAS(1)*(2*vn - 2*vwn))/2;
H_TAS = zeros(1,21);
H_TAS(1,4) = SH_TAS(3);
H_TAS(1,5) = SH_TAS(2);
H_TAS(1,6) = vd*SH_TAS(1);
H_TAS(1,14) = -SH_TAS(3);
H_TAS(1,15) = -SH_TAS(2);
SK_TAS = zeros(2,1);
SK_TAS(1) = 1/(R_TAS + SH_TAS(3)*(OP(4,4)*SH_TAS(3) + OP(5,4)*SH_TAS(2) - OP(14,4)*SH_TAS(3) - OP(15,4)*SH_TAS(2) + OP(6,4)*vd*SH_TAS(1)) + SH_TAS(2)*(OP(4,5)*SH_TAS(3) + OP(5,5)*SH_TAS(2) - OP(14,5)*SH_TAS(3) - OP(15,5)*SH_TAS(2) + OP(6,5)*vd*SH_TAS(1)) - SH_TAS(3)*(OP(4,14)*SH_TAS(3) + OP(5,14)*SH_TAS(2) - OP(14,14)*SH_TAS(3) - OP(15,14)*SH_TAS(2) + OP(6,14)*vd*SH_TAS(1)) - SH_TAS(2)*(OP(4,15)*SH_TAS(3) + OP(5,15)*SH_TAS(2) - OP(14,15)*SH_TAS(3) - OP(15,15)*SH_TAS(2) + OP(6,15)*vd*SH_TAS(1)) + vd*SH_TAS(1)*(OP(4,6)*SH_TAS(3) + OP(5,6)*SH_TAS(2) - OP(14,6)*SH_TAS(3) - OP(15,6)*SH_TAS(2) + OP(6,6)*vd*SH_TAS(1)));
SK_TAS(2) = SH_TAS(2);
Kfusion = zeros(21,1);
Kfusion = zeros(1,1);
Kfusion(1) = SK_TAS(1)*(OP(1,4)*SH_TAS(3) - OP(1,14)*SH_TAS(3) + OP(1,5)*SK_TAS(2) - OP(1,15)*SK_TAS(2) + OP(1,6)*vd*SH_TAS(1));
Kfusion(2) = SK_TAS(1)*(OP(2,4)*SH_TAS(3) - OP(2,14)*SH_TAS(3) + OP(2,5)*SK_TAS(2) - OP(2,15)*SK_TAS(2) + OP(2,6)*vd*SH_TAS(1));
Kfusion(3) = SK_TAS(1)*(OP(3,4)*SH_TAS(3) - OP(3,14)*SH_TAS(3) + OP(3,5)*SK_TAS(2) - OP(3,15)*SK_TAS(2) + OP(3,6)*vd*SH_TAS(1));
Kfusion(4) = SK_TAS(1)*(OP(4,4)*SH_TAS(3) - OP(4,14)*SH_TAS(3) + OP(4,5)*SK_TAS(2) - OP(4,15)*SK_TAS(2) + OP(4,6)*vd*SH_TAS(1));
Kfusion(5) = SK_TAS(1)*(OP(5,4)*SH_TAS(3) - OP(5,14)*SH_TAS(3) + OP(5,5)*SK_TAS(2) - OP(5,15)*SK_TAS(2) + OP(5,6)*vd*SH_TAS(1));
Kfusion(6) = SK_TAS(1)*(OP(6,4)*SH_TAS(3) - OP(6,14)*SH_TAS(3) + OP(6,5)*SK_TAS(2) - OP(6,15)*SK_TAS(2) + OP(6,6)*vd*SH_TAS(1));
Kfusion(7) = SK_TAS(1)*(OP(7,4)*SH_TAS(3) - OP(7,14)*SH_TAS(3) + OP(7,5)*SK_TAS(2) - OP(7,15)*SK_TAS(2) + OP(7,6)*vd*SH_TAS(1));
Kfusion(8) = SK_TAS(1)*(OP(8,4)*SH_TAS(3) - OP(8,14)*SH_TAS(3) + OP(8,5)*SK_TAS(2) - OP(8,15)*SK_TAS(2) + OP(8,6)*vd*SH_TAS(1));
Kfusion(9) = SK_TAS(1)*(OP(9,4)*SH_TAS(3) - OP(9,14)*SH_TAS(3) + OP(9,5)*SK_TAS(2) - OP(9,15)*SK_TAS(2) + OP(9,6)*vd*SH_TAS(1));
Kfusion(10) = SK_TAS(1)*(OP(10,4)*SH_TAS(3) - OP(10,14)*SH_TAS(3) + OP(10,5)*SK_TAS(2) - OP(10,15)*SK_TAS(2) + OP(10,6)*vd*SH_TAS(1));
Kfusion(11) = SK_TAS(1)*(OP(11,4)*SH_TAS(3) - OP(11,14)*SH_TAS(3) + OP(11,5)*SK_TAS(2) - OP(11,15)*SK_TAS(2) + OP(11,6)*vd*SH_TAS(1));
Kfusion(12) = SK_TAS(1)*(OP(12,4)*SH_TAS(3) - OP(12,14)*SH_TAS(3) + OP(12,5)*SK_TAS(2) - OP(12,15)*SK_TAS(2) + OP(12,6)*vd*SH_TAS(1));
Kfusion(13) = SK_TAS(1)*(OP(13,4)*SH_TAS(3) - OP(13,14)*SH_TAS(3) + OP(13,5)*SK_TAS(2) - OP(13,15)*SK_TAS(2) + OP(13,6)*vd*SH_TAS(1));
Kfusion(14) = SK_TAS(1)*(OP(14,4)*SH_TAS(3) - OP(14,14)*SH_TAS(3) + OP(14,5)*SK_TAS(2) - OP(14,15)*SK_TAS(2) + OP(14,6)*vd*SH_TAS(1));
Kfusion(15) = SK_TAS(1)*(OP(15,4)*SH_TAS(3) - OP(15,14)*SH_TAS(3) + OP(15,5)*SK_TAS(2) - OP(15,15)*SK_TAS(2) + OP(15,6)*vd*SH_TAS(1));
Kfusion(16) = SK_TAS(1)*(OP(16,4)*SH_TAS(3) - OP(16,14)*SH_TAS(3) + OP(16,5)*SK_TAS(2) - OP(16,15)*SK_TAS(2) + OP(16,6)*vd*SH_TAS(1));
Kfusion(17) = SK_TAS(1)*(OP(17,4)*SH_TAS(3) - OP(17,14)*SH_TAS(3) + OP(17,5)*SK_TAS(2) - OP(17,15)*SK_TAS(2) + OP(17,6)*vd*SH_TAS(1));
Kfusion(18) = SK_TAS(1)*(OP(18,4)*SH_TAS(3) - OP(18,14)*SH_TAS(3) + OP(18,5)*SK_TAS(2) - OP(18,15)*SK_TAS(2) + OP(18,6)*vd*SH_TAS(1));
Kfusion(19) = SK_TAS(1)*(OP(19,4)*SH_TAS(3) - OP(19,14)*SH_TAS(3) + OP(19,5)*SK_TAS(2) - OP(19,15)*SK_TAS(2) + OP(19,6)*vd*SH_TAS(1));
Kfusion(20) = SK_TAS(1)*(OP(20,4)*SH_TAS(3) - OP(20,14)*SH_TAS(3) + OP(20,5)*SK_TAS(2) - OP(20,15)*SK_TAS(2) + OP(20,6)*vd*SH_TAS(1));
Kfusion(21) = SK_TAS(1)*(OP(21,4)*SH_TAS(3) - OP(21,14)*SH_TAS(3) + OP(21,5)*SK_TAS(2) - OP(21,15)*SK_TAS(2) + OP(21,6)*vd*SH_TAS(1));
SH_BETA = zeros(10,1);
SH_BETA(1) = (vn - vwn)*(q0^2 + q1^2 - q2^2 - q3^2) - vd*(2*q0*q2 - 2*q1*q3) + (ve - vwe)*(2*q0*q3 + 2*q1*q2);
SH_BETA(2) = (ve - vwe)*(q0^2 - q1^2 + q2^2 - q3^2) + vd*(2*q0*q1 + 2*q2*q3) - (vn - vwn)*(2*q0*q3 - 2*q1*q2);
SH_BETA(3) = vd*(q0^2 - q1^2 - q2^2 + q3^2) - (ve - vwe)*(2*q0*q1 - 2*q2*q3) + (vn - vwn)*(2*q0*q2 + 2*q1*q3);
SH_BETA(4) = 1/SH_BETA(1)^2;
SH_BETA(5) = (q0^2 - q1^2 + q2^2 - q3^2)/SH_BETA(1);
SH_BETA(6) = q0^2 + q1^2 - q2^2 - q3^2;
SH_BETA(7) = 1/SH_BETA(1);
SH_BETA(8) = 2*q0*q3;
SH_BETA(9) = SH_BETA(8) + 2*q1*q2;
SH_BETA(10) = SH_BETA(8) - 2*q1*q2;
H_BETA = zeros(1,21);
H_BETA(1,1) = SH_BETA(3)*SH_BETA(7);
H_BETA(1,2) = SH_BETA(2)*SH_BETA(3)*SH_BETA(4);
H_BETA(1,3) = - SH_BETA(2)^2*SH_BETA(4) - 1;
H_BETA(1,4) = - SH_BETA(7)*SH_BETA(10) - SH_BETA(2)*SH_BETA(4)*SH_BETA(6);
H_BETA(1,5) = SH_BETA(5) - SH_BETA(2)*SH_BETA(4)*SH_BETA(9);
H_BETA(1,6) = SH_BETA(7)*(2*q0*q1 + 2*q2*q3) + SH_BETA(2)*SH_BETA(4)*(2*q0*q2 - 2*q1*q3);
H_BETA(1,14) = SH_BETA(7)*SH_BETA(10) + SH_BETA(2)*SH_BETA(4)*SH_BETA(6);
H_BETA(1,15) = SH_BETA(2)*SH_BETA(4)*SH_BETA(9) - SH_BETA(5);
SK_BETA = zeros(6,1);
SK_BETA(1) = 1/(R_BETA + (SH_BETA(5) - SH_BETA(2)*SH_BETA(4)*SH_BETA(9))*(OP(14,5)*(SH_BETA(7)*SH_BETA(10) + SH_BETA(2)*SH_BETA(4)*SH_BETA(6)) - OP(4,5)*(SH_BETA(7)*SH_BETA(10) + SH_BETA(2)*SH_BETA(4)*SH_BETA(6)) - OP(3,5)*(SH_BETA(2)^2*SH_BETA(4) + 1) + OP(6,5)*(SH_BETA(7)*(2*q0*q1 + 2*q2*q3) + SH_BETA(2)*SH_BETA(4)*(2*q0*q2 - 2*q1*q3)) + OP(5,5)*(SH_BETA(5) - SH_BETA(2)*SH_BETA(4)*SH_BETA(9)) - OP(15,5)*(SH_BETA(5) - SH_BETA(2)*SH_BETA(4)*SH_BETA(9)) + OP(1,5)*SH_BETA(3)*SH_BETA(7) + OP(2,5)*SH_BETA(2)*SH_BETA(3)*SH_BETA(4)) - (SH_BETA(5) - SH_BETA(2)*SH_BETA(4)*SH_BETA(9))*(OP(14,15)*(SH_BETA(7)*SH_BETA(10) + SH_BETA(2)*SH_BETA(4)*SH_BETA(6)) - OP(4,15)*(SH_BETA(7)*SH_BETA(10) + SH_BETA(2)*SH_BETA(4)*SH_BETA(6)) - OP(3,15)*(SH_BETA(2)^2*SH_BETA(4) + 1) + OP(6,15)*(SH_BETA(7)*(2*q0*q1 + 2*q2*q3) + SH_BETA(2)*SH_BETA(4)*(2*q0*q2 - 2*q1*q3)) + OP(5,15)*(SH_BETA(5) - SH_BETA(2)*SH_BETA(4)*SH_BETA(9)) - OP(15,15)*(SH_BETA(5) - SH_BETA(2)*SH_BETA(4)*SH_BETA(9)) + OP(1,15)*SH_BETA(3)*SH_BETA(7) + OP(2,15)*SH_BETA(2)*SH_BETA(3)*SH_BETA(4)) - (SH_BETA(7)*SH_BETA(10) + SH_BETA(2)*SH_BETA(4)*SH_BETA(6))*(OP(14,4)*(SH_BETA(7)*SH_BETA(10) + SH_BETA(2)*SH_BETA(4)*SH_BETA(6)) - OP(4,4)*(SH_BETA(7)*SH_BETA(10) + SH_BETA(2)*SH_BETA(4)*SH_BETA(6)) - OP(3,4)*(SH_BETA(2)^2*SH_BETA(4) + 1) + OP(6,4)*(SH_BETA(7)*(2*q0*q1 + 2*q2*q3) + SH_BETA(2)*SH_BETA(4)*(2*q0*q2 - 2*q1*q3)) + OP(5,4)*(SH_BETA(5) - SH_BETA(2)*SH_BETA(4)*SH_BETA(9)) - OP(15,4)*(SH_BETA(5) - SH_BETA(2)*SH_BETA(4)*SH_BETA(9)) + OP(1,4)*SH_BETA(3)*SH_BETA(7) + OP(2,4)*SH_BETA(2)*SH_BETA(3)*SH_BETA(4)) + (SH_BETA(7)*SH_BETA(10) + SH_BETA(2)*SH_BETA(4)*SH_BETA(6))*(OP(14,14)*(SH_BETA(7)*SH_BETA(10) + SH_BETA(2)*SH_BETA(4)*SH_BETA(6)) - OP(4,14)*(SH_BETA(7)*SH_BETA(10) + SH_BETA(2)*SH_BETA(4)*SH_BETA(6)) - OP(3,14)*(SH_BETA(2)^2*SH_BETA(4) + 1) + OP(6,14)*(SH_BETA(7)*(2*q0*q1 + 2*q2*q3) + SH_BETA(2)*SH_BETA(4)*(2*q0*q2 - 2*q1*q3)) + OP(5,14)*(SH_BETA(5) - SH_BETA(2)*SH_BETA(4)*SH_BETA(9)) - OP(15,14)*(SH_BETA(5) - SH_BETA(2)*SH_BETA(4)*SH_BETA(9)) + OP(1,14)*SH_BETA(3)*SH_BETA(7) + OP(2,14)*SH_BETA(2)*SH_BETA(3)*SH_BETA(4)) - (SH_BETA(2)^2*SH_BETA(4) + 1)*(OP(14,3)*(SH_BETA(7)*SH_BETA(10) + SH_BETA(2)*SH_BETA(4)*SH_BETA(6)) - OP(4,3)*(SH_BETA(7)*SH_BETA(10) + SH_BETA(2)*SH_BETA(4)*SH_BETA(6)) - OP(3,3)*(SH_BETA(2)^2*SH_BETA(4) + 1) + OP(6,3)*(SH_BETA(7)*(2*q0*q1 + 2*q2*q3) + SH_BETA(2)*SH_BETA(4)*(2*q0*q2 - 2*q1*q3)) + OP(5,3)*(SH_BETA(5) - SH_BETA(2)*SH_BETA(4)*SH_BETA(9)) - OP(15,3)*(SH_BETA(5) - SH_BETA(2)*SH_BETA(4)*SH_BETA(9)) + OP(1,3)*SH_BETA(3)*SH_BETA(7) + OP(2,3)*SH_BETA(2)*SH_BETA(3)*SH_BETA(4)) + (SH_BETA(7)*(2*q0*q1 + 2*q2*q3) + SH_BETA(2)*SH_BETA(4)*(2*q0*q2 - 2*q1*q3))*(OP(14,6)*(SH_BETA(7)*SH_BETA(10) + SH_BETA(2)*SH_BETA(4)*SH_BETA(6)) - OP(4,6)*(SH_BETA(7)*SH_BETA(10) + SH_BETA(2)*SH_BETA(4)*SH_BETA(6)) - OP(3,6)*(SH_BETA(2)^2*SH_BETA(4) + 1) + OP(6,6)*(SH_BETA(7)*(2*q0*q1 + 2*q2*q3) + SH_BETA(2)*SH_BETA(4)*(2*q0*q2 - 2*q1*q3)) + OP(5,6)*(SH_BETA(5) - SH_BETA(2)*SH_BETA(4)*SH_BETA(9)) - OP(15,6)*(SH_BETA(5) - SH_BETA(2)*SH_BETA(4)*SH_BETA(9)) + OP(1,6)*SH_BETA(3)*SH_BETA(7) + OP(2,6)*SH_BETA(2)*SH_BETA(3)*SH_BETA(4)) + SH_BETA(3)*SH_BETA(7)*(OP(14,1)*(SH_BETA(7)*SH_BETA(10) + SH_BETA(2)*SH_BETA(4)*SH_BETA(6)) - OP(4,1)*(SH_BETA(7)*SH_BETA(10) + SH_BETA(2)*SH_BETA(4)*SH_BETA(6)) - OP(3,1)*(SH_BETA(2)^2*SH_BETA(4) + 1) + OP(6,1)*(SH_BETA(7)*(2*q0*q1 + 2*q2*q3) + SH_BETA(2)*SH_BETA(4)*(2*q0*q2 - 2*q1*q3)) + OP(5,1)*(SH_BETA(5) - SH_BETA(2)*SH_BETA(4)*SH_BETA(9)) - OP(15,1)*(SH_BETA(5) - SH_BETA(2)*SH_BETA(4)*SH_BETA(9)) + OP(1,1)*SH_BETA(3)*SH_BETA(7) + OP(2,1)*SH_BETA(2)*SH_BETA(3)*SH_BETA(4)) + SH_BETA(2)*SH_BETA(3)*SH_BETA(4)*(OP(14,2)*(SH_BETA(7)*SH_BETA(10) + SH_BETA(2)*SH_BETA(4)*SH_BETA(6)) - OP(4,2)*(SH_BETA(7)*SH_BETA(10) + SH_BETA(2)*SH_BETA(4)*SH_BETA(6)) - OP(3,2)*(SH_BETA(2)^2*SH_BETA(4) + 1) + OP(6,2)*(SH_BETA(7)*(2*q0*q1 + 2*q2*q3) + SH_BETA(2)*SH_BETA(4)*(2*q0*q2 - 2*q1*q3)) + OP(5,2)*(SH_BETA(5) - SH_BETA(2)*SH_BETA(4)*SH_BETA(9)) - OP(15,2)*(SH_BETA(5) - SH_BETA(2)*SH_BETA(4)*SH_BETA(9)) + OP(1,2)*SH_BETA(3)*SH_BETA(7) + OP(2,2)*SH_BETA(2)*SH_BETA(3)*SH_BETA(4)));
SK_BETA(2) = SH_BETA(7)*(2*q0*q1 + 2*q2*q3) + SH_BETA(2)*SH_BETA(4)*(2*q0*q2 - 2*q1*q3);
SK_BETA(3) = SH_BETA(7)*SH_BETA(10) + SH_BETA(2)*SH_BETA(4)*SH_BETA(6);
SK_BETA(4) = SH_BETA(5) - SH_BETA(2)*SH_BETA(4)*SH_BETA(9);
SK_BETA(5) = SH_BETA(2)^2*SH_BETA(4) + 1;
SK_BETA(6) = SH_BETA(3);
Kfusion = zeros(21,1);
Kfusion = zeros(1,1);
Kfusion(1) = SK_BETA(1)*(OP(1,6)*SK_BETA(2) - OP(1,3)*SK_BETA(5) - OP(1,4)*SK_BETA(3) + OP(1,5)*SK_BETA(4) + OP(1,14)*SK_BETA(3) - OP(1,15)*SK_BETA(4) + OP(1,1)*SH_BETA(7)*SK_BETA(6) + OP(1,2)*SH_BETA(2)*SH_BETA(4)*SK_BETA(6));
Kfusion(2) = SK_BETA(1)*(OP(2,6)*SK_BETA(2) - OP(2,3)*SK_BETA(5) - OP(2,4)*SK_BETA(3) + OP(2,5)*SK_BETA(4) + OP(2,14)*SK_BETA(3) - OP(2,15)*SK_BETA(4) + OP(2,1)*SH_BETA(7)*SK_BETA(6) + OP(2,2)*SH_BETA(2)*SH_BETA(4)*SK_BETA(6));
Kfusion(3) = SK_BETA(1)*(OP(3,6)*SK_BETA(2) - OP(3,3)*SK_BETA(5) - OP(3,4)*SK_BETA(3) + OP(3,5)*SK_BETA(4) + OP(3,14)*SK_BETA(3) - OP(3,15)*SK_BETA(4) + OP(3,1)*SH_BETA(7)*SK_BETA(6) + OP(3,2)*SH_BETA(2)*SH_BETA(4)*SK_BETA(6));
Kfusion(4) = SK_BETA(1)*(OP(4,6)*SK_BETA(2) - OP(4,3)*SK_BETA(5) - OP(4,4)*SK_BETA(3) + OP(4,5)*SK_BETA(4) + OP(4,14)*SK_BETA(3) - OP(4,15)*SK_BETA(4) + OP(4,1)*SH_BETA(7)*SK_BETA(6) + OP(4,2)*SH_BETA(2)*SH_BETA(4)*SK_BETA(6));
Kfusion(5) = SK_BETA(1)*(OP(5,6)*SK_BETA(2) - OP(5,3)*SK_BETA(5) - OP(5,4)*SK_BETA(3) + OP(5,5)*SK_BETA(4) + OP(5,14)*SK_BETA(3) - OP(5,15)*SK_BETA(4) + OP(5,1)*SH_BETA(7)*SK_BETA(6) + OP(5,2)*SH_BETA(2)*SH_BETA(4)*SK_BETA(6));
Kfusion(6) = SK_BETA(1)*(OP(6,6)*SK_BETA(2) - OP(6,3)*SK_BETA(5) - OP(6,4)*SK_BETA(3) + OP(6,5)*SK_BETA(4) + OP(6,14)*SK_BETA(3) - OP(6,15)*SK_BETA(4) + OP(6,1)*SH_BETA(7)*SK_BETA(6) + OP(6,2)*SH_BETA(2)*SH_BETA(4)*SK_BETA(6));
Kfusion(7) = SK_BETA(1)*(OP(7,6)*SK_BETA(2) - OP(7,3)*SK_BETA(5) - OP(7,4)*SK_BETA(3) + OP(7,5)*SK_BETA(4) + OP(7,14)*SK_BETA(3) - OP(7,15)*SK_BETA(4) + OP(7,1)*SH_BETA(7)*SK_BETA(6) + OP(7,2)*SH_BETA(2)*SH_BETA(4)*SK_BETA(6));
Kfusion(8) = SK_BETA(1)*(OP(8,6)*SK_BETA(2) - OP(8,3)*SK_BETA(5) - OP(8,4)*SK_BETA(3) + OP(8,5)*SK_BETA(4) + OP(8,14)*SK_BETA(3) - OP(8,15)*SK_BETA(4) + OP(8,1)*SH_BETA(7)*SK_BETA(6) + OP(8,2)*SH_BETA(2)*SH_BETA(4)*SK_BETA(6));
Kfusion(9) = SK_BETA(1)*(OP(9,6)*SK_BETA(2) - OP(9,3)*SK_BETA(5) - OP(9,4)*SK_BETA(3) + OP(9,5)*SK_BETA(4) + OP(9,14)*SK_BETA(3) - OP(9,15)*SK_BETA(4) + OP(9,1)*SH_BETA(7)*SK_BETA(6) + OP(9,2)*SH_BETA(2)*SH_BETA(4)*SK_BETA(6));
Kfusion(10) = SK_BETA(1)*(OP(10,6)*SK_BETA(2) - OP(10,3)*SK_BETA(5) - OP(10,4)*SK_BETA(3) + OP(10,5)*SK_BETA(4) + OP(10,14)*SK_BETA(3) - OP(10,15)*SK_BETA(4) + OP(10,1)*SH_BETA(7)*SK_BETA(6) + OP(10,2)*SH_BETA(2)*SH_BETA(4)*SK_BETA(6));
Kfusion(11) = SK_BETA(1)*(OP(11,6)*SK_BETA(2) - OP(11,3)*SK_BETA(5) - OP(11,4)*SK_BETA(3) + OP(11,5)*SK_BETA(4) + OP(11,14)*SK_BETA(3) - OP(11,15)*SK_BETA(4) + OP(11,1)*SH_BETA(7)*SK_BETA(6) + OP(11,2)*SH_BETA(2)*SH_BETA(4)*SK_BETA(6));
Kfusion(12) = SK_BETA(1)*(OP(12,6)*SK_BETA(2) - OP(12,3)*SK_BETA(5) - OP(12,4)*SK_BETA(3) + OP(12,5)*SK_BETA(4) + OP(12,14)*SK_BETA(3) - OP(12,15)*SK_BETA(4) + OP(12,1)*SH_BETA(7)*SK_BETA(6) + OP(12,2)*SH_BETA(2)*SH_BETA(4)*SK_BETA(6));
Kfusion(13) = SK_BETA(1)*(OP(13,6)*SK_BETA(2) - OP(13,3)*SK_BETA(5) - OP(13,4)*SK_BETA(3) + OP(13,5)*SK_BETA(4) + OP(13,14)*SK_BETA(3) - OP(13,15)*SK_BETA(4) + OP(13,1)*SH_BETA(7)*SK_BETA(6) + OP(13,2)*SH_BETA(2)*SH_BETA(4)*SK_BETA(6));
Kfusion(14) = SK_BETA(1)*(OP(14,6)*SK_BETA(2) - OP(14,3)*SK_BETA(5) - OP(14,4)*SK_BETA(3) + OP(14,5)*SK_BETA(4) + OP(14,14)*SK_BETA(3) - OP(14,15)*SK_BETA(4) + OP(14,1)*SH_BETA(7)*SK_BETA(6) + OP(14,2)*SH_BETA(2)*SH_BETA(4)*SK_BETA(6));
Kfusion(15) = SK_BETA(1)*(OP(15,6)*SK_BETA(2) - OP(15,3)*SK_BETA(5) - OP(15,4)*SK_BETA(3) + OP(15,5)*SK_BETA(4) + OP(15,14)*SK_BETA(3) - OP(15,15)*SK_BETA(4) + OP(15,1)*SH_BETA(7)*SK_BETA(6) + OP(15,2)*SH_BETA(2)*SH_BETA(4)*SK_BETA(6));
Kfusion(16) = SK_BETA(1)*(OP(16,6)*SK_BETA(2) - OP(16,3)*SK_BETA(5) - OP(16,4)*SK_BETA(3) + OP(16,5)*SK_BETA(4) + OP(16,14)*SK_BETA(3) - OP(16,15)*SK_BETA(4) + OP(16,1)*SH_BETA(7)*SK_BETA(6) + OP(16,2)*SH_BETA(2)*SH_BETA(4)*SK_BETA(6));
Kfusion(17) = SK_BETA(1)*(OP(17,6)*SK_BETA(2) - OP(17,3)*SK_BETA(5) - OP(17,4)*SK_BETA(3) + OP(17,5)*SK_BETA(4) + OP(17,14)*SK_BETA(3) - OP(17,15)*SK_BETA(4) + OP(17,1)*SH_BETA(7)*SK_BETA(6) + OP(17,2)*SH_BETA(2)*SH_BETA(4)*SK_BETA(6));
Kfusion(18) = SK_BETA(1)*(OP(18,6)*SK_BETA(2) - OP(18,3)*SK_BETA(5) - OP(18,4)*SK_BETA(3) + OP(18,5)*SK_BETA(4) + OP(18,14)*SK_BETA(3) - OP(18,15)*SK_BETA(4) + OP(18,1)*SH_BETA(7)*SK_BETA(6) + OP(18,2)*SH_BETA(2)*SH_BETA(4)*SK_BETA(6));
Kfusion(19) = SK_BETA(1)*(OP(19,6)*SK_BETA(2) - OP(19,3)*SK_BETA(5) - OP(19,4)*SK_BETA(3) + OP(19,5)*SK_BETA(4) + OP(19,14)*SK_BETA(3) - OP(19,15)*SK_BETA(4) + OP(19,1)*SH_BETA(7)*SK_BETA(6) + OP(19,2)*SH_BETA(2)*SH_BETA(4)*SK_BETA(6));
Kfusion(20) = SK_BETA(1)*(OP(20,6)*SK_BETA(2) - OP(20,3)*SK_BETA(5) - OP(20,4)*SK_BETA(3) + OP(20,5)*SK_BETA(4) + OP(20,14)*SK_BETA(3) - OP(20,15)*SK_BETA(4) + OP(20,1)*SH_BETA(7)*SK_BETA(6) + OP(20,2)*SH_BETA(2)*SH_BETA(4)*SK_BETA(6));
Kfusion(21) = SK_BETA(1)*(OP(21,6)*SK_BETA(2) - OP(21,3)*SK_BETA(5) - OP(21,4)*SK_BETA(3) + OP(21,5)*SK_BETA(4) + OP(21,14)*SK_BETA(3) - OP(21,15)*SK_BETA(4) + OP(21,1)*SH_BETA(7)*SK_BETA(6) + OP(21,2)*SH_BETA(2)*SH_BETA(4)*SK_BETA(6));
SH_MAG = zeros(9,1);
SH_MAG(1) = q0^2 - q1^2 + q2^2 - q3^2;
SH_MAG(2) = q0^2 + q1^2 - q2^2 - q3^2;
SH_MAG(3) = q0^2 - q1^2 - q2^2 + q3^2;
SH_MAG(4) = 2*q0*q1 + 2*q2*q3;
SH_MAG(5) = 2*q0*q3 + 2*q1*q2;
SH_MAG(6) = 2*q0*q2 + 2*q1*q3;
SH_MAG(7) = magE*(2*q0*q1 - 2*q2*q3);
SH_MAG(8) = 2*q1*q3 - 2*q0*q2;
SH_MAG(9) = 2*q0*q3;
H_MAG = zeros(1,21);
H_MAG(2) = SH_MAG(7) - magD*SH_MAG(3) - magN*SH_MAG(6);
H_MAG(3) = magE*SH_MAG(1) + magD*SH_MAG(4) - magN*(SH_MAG(9) - 2*q1*q2);
H_MAG(16) = SH_MAG(2);
H_MAG(17) = SH_MAG(5);
H_MAG(18) = SH_MAG(8);
H_MAG(19) = 1;
SK_MX = zeros(4,1);
SK_MX(1) = 1/(OP(19,19) + R_MAG - OP(2,19)*(magD*SH_MAG(3) - SH_MAG(7) + magN*SH_MAG(6)) + OP(16,19)*SH_MAG(2) + OP(17,19)*SH_MAG(5) + OP(18,19)*SH_MAG(8) + OP(3,19)*(magE*SH_MAG(1) + magD*SH_MAG(4) - magN*(SH_MAG(9) - 2*q1*q2)) - (magD*SH_MAG(3) - SH_MAG(7) + magN*SH_MAG(6))*(OP(19,2) - OP(2,2)*(magD*SH_MAG(3) - SH_MAG(7) + magN*SH_MAG(6)) + OP(16,2)*SH_MAG(2) + OP(17,2)*SH_MAG(5) + OP(18,2)*SH_MAG(8) + OP(3,2)*(magE*SH_MAG(1) + magD*SH_MAG(4) - magN*(SH_MAG(9) - 2*q1*q2))) + SH_MAG(2)*(OP(19,16) - OP(2,16)*(magD*SH_MAG(3) - SH_MAG(7) + magN*SH_MAG(6)) + OP(16,16)*SH_MAG(2) + OP(17,16)*SH_MAG(5) + OP(18,16)*SH_MAG(8) + OP(3,16)*(magE*SH_MAG(1) + magD*SH_MAG(4) - magN*(SH_MAG(9) - 2*q1*q2))) + SH_MAG(5)*(OP(19,17) - OP(2,17)*(magD*SH_MAG(3) - SH_MAG(7) + magN*SH_MAG(6)) + OP(16,17)*SH_MAG(2) + OP(17,17)*SH_MAG(5) + OP(18,17)*SH_MAG(8) + OP(3,17)*(magE*SH_MAG(1) + magD*SH_MAG(4) - magN*(SH_MAG(9) - 2*q1*q2))) + SH_MAG(8)*(OP(19,18) - OP(2,18)*(magD*SH_MAG(3) - SH_MAG(7) + magN*SH_MAG(6)) + OP(16,18)*SH_MAG(2) + OP(17,18)*SH_MAG(5) + OP(18,18)*SH_MAG(8) + OP(3,18)*(magE*SH_MAG(1) + magD*SH_MAG(4) - magN*(SH_MAG(9) - 2*q1*q2))) + (magE*SH_MAG(1) + magD*SH_MAG(4) - magN*(SH_MAG(9) - 2*q1*q2))*(OP(19,3) - OP(2,3)*(magD*SH_MAG(3) - SH_MAG(7) + magN*SH_MAG(6)) + OP(16,3)*SH_MAG(2) + OP(17,3)*SH_MAG(5) + OP(18,3)*SH_MAG(8) + OP(3,3)*(magE*SH_MAG(1) + magD*SH_MAG(4) - magN*(SH_MAG(9) - 2*q1*q2))));
SK_MX(2) = magE*SH_MAG(1) + magD*SH_MAG(4) - magN*(SH_MAG(9) - 2*q1*q2);
SK_MX(3) = magD*SH_MAG(3) - SH_MAG(7) + magN*SH_MAG(6);
SK_MX(4) = SH_MAG(8);
Kfusion = zeros(21,1);
Kfusion = zeros(1,1);
Kfusion(1) = SK_MX(1)*(OP(1,19) + OP(1,16)*SH_MAG(2) + OP(1,17)*SH_MAG(5) - OP(1,2)*SK_MX(3) + OP(1,3)*SK_MX(2) + OP(1,18)*SK_MX(4));
Kfusion(2) = SK_MX(1)*(OP(2,19) + OP(2,16)*SH_MAG(2) + OP(2,17)*SH_MAG(5) - OP(2,2)*SK_MX(3) + OP(2,3)*SK_MX(2) + OP(2,18)*SK_MX(4));
Kfusion(3) = SK_MX(1)*(OP(3,19) + OP(3,16)*SH_MAG(2) + OP(3,17)*SH_MAG(5) - OP(3,2)*SK_MX(3) + OP(3,3)*SK_MX(2) + OP(3,18)*SK_MX(4));
Kfusion(4) = SK_MX(1)*(OP(4,19) + OP(4,16)*SH_MAG(2) + OP(4,17)*SH_MAG(5) - OP(4,2)*SK_MX(3) + OP(4,3)*SK_MX(2) + OP(4,18)*SK_MX(4));
Kfusion(5) = SK_MX(1)*(OP(5,19) + OP(5,16)*SH_MAG(2) + OP(5,17)*SH_MAG(5) - OP(5,2)*SK_MX(3) + OP(5,3)*SK_MX(2) + OP(5,18)*SK_MX(4));
Kfusion(6) = SK_MX(1)*(OP(6,19) + OP(6,16)*SH_MAG(2) + OP(6,17)*SH_MAG(5) - OP(6,2)*SK_MX(3) + OP(6,3)*SK_MX(2) + OP(6,18)*SK_MX(4));
Kfusion(7) = SK_MX(1)*(OP(7,19) + OP(7,16)*SH_MAG(2) + OP(7,17)*SH_MAG(5) - OP(7,2)*SK_MX(3) + OP(7,3)*SK_MX(2) + OP(7,18)*SK_MX(4));
Kfusion(8) = SK_MX(1)*(OP(8,19) + OP(8,16)*SH_MAG(2) + OP(8,17)*SH_MAG(5) - OP(8,2)*SK_MX(3) + OP(8,3)*SK_MX(2) + OP(8,18)*SK_MX(4));
Kfusion(9) = SK_MX(1)*(OP(9,19) + OP(9,16)*SH_MAG(2) + OP(9,17)*SH_MAG(5) - OP(9,2)*SK_MX(3) + OP(9,3)*SK_MX(2) + OP(9,18)*SK_MX(4));
Kfusion(10) = SK_MX(1)*(OP(10,19) + OP(10,16)*SH_MAG(2) + OP(10,17)*SH_MAG(5) - OP(10,2)*SK_MX(3) + OP(10,3)*SK_MX(2) + OP(10,18)*SK_MX(4));
Kfusion(11) = SK_MX(1)*(OP(11,19) + OP(11,16)*SH_MAG(2) + OP(11,17)*SH_MAG(5) - OP(11,2)*SK_MX(3) + OP(11,3)*SK_MX(2) + OP(11,18)*SK_MX(4));
Kfusion(12) = SK_MX(1)*(OP(12,19) + OP(12,16)*SH_MAG(2) + OP(12,17)*SH_MAG(5) - OP(12,2)*SK_MX(3) + OP(12,3)*SK_MX(2) + OP(12,18)*SK_MX(4));
Kfusion(13) = SK_MX(1)*(OP(13,19) + OP(13,16)*SH_MAG(2) + OP(13,17)*SH_MAG(5) - OP(13,2)*SK_MX(3) + OP(13,3)*SK_MX(2) + OP(13,18)*SK_MX(4));
Kfusion(14) = SK_MX(1)*(OP(14,19) + OP(14,16)*SH_MAG(2) + OP(14,17)*SH_MAG(5) - OP(14,2)*SK_MX(3) + OP(14,3)*SK_MX(2) + OP(14,18)*SK_MX(4));
Kfusion(15) = SK_MX(1)*(OP(15,19) + OP(15,16)*SH_MAG(2) + OP(15,17)*SH_MAG(5) - OP(15,2)*SK_MX(3) + OP(15,3)*SK_MX(2) + OP(15,18)*SK_MX(4));
Kfusion(16) = SK_MX(1)*(OP(16,19) + OP(16,16)*SH_MAG(2) + OP(16,17)*SH_MAG(5) - OP(16,2)*SK_MX(3) + OP(16,3)*SK_MX(2) + OP(16,18)*SK_MX(4));
Kfusion(17) = SK_MX(1)*(OP(17,19) + OP(17,16)*SH_MAG(2) + OP(17,17)*SH_MAG(5) - OP(17,2)*SK_MX(3) + OP(17,3)*SK_MX(2) + OP(17,18)*SK_MX(4));
Kfusion(18) = SK_MX(1)*(OP(18,19) + OP(18,16)*SH_MAG(2) + OP(18,17)*SH_MAG(5) - OP(18,2)*SK_MX(3) + OP(18,3)*SK_MX(2) + OP(18,18)*SK_MX(4));
Kfusion(19) = SK_MX(1)*(OP(19,19) + OP(19,16)*SH_MAG(2) + OP(19,17)*SH_MAG(5) - OP(19,2)*SK_MX(3) + OP(19,3)*SK_MX(2) + OP(19,18)*SK_MX(4));
Kfusion(20) = SK_MX(1)*(OP(20,19) + OP(20,16)*SH_MAG(2) + OP(20,17)*SH_MAG(5) - OP(20,2)*SK_MX(3) + OP(20,3)*SK_MX(2) + OP(20,18)*SK_MX(4));
Kfusion(21) = SK_MX(1)*(OP(21,19) + OP(21,16)*SH_MAG(2) + OP(21,17)*SH_MAG(5) - OP(21,2)*SK_MX(3) + OP(21,3)*SK_MX(2) + OP(21,18)*SK_MX(4));
H_MAG = zeros(1,21);
H_MAG(1) = magD*SH_MAG(3) - SH_MAG(7) + magN*SH_MAG(6);
H_MAG(3) = - magE*SH_MAG(5) - magD*SH_MAG(8) - magN*SH_MAG(2);
H_MAG(16) = 2*q1*q2 - SH_MAG(9);
H_MAG(17) = SH_MAG(1);
H_MAG(18) = SH_MAG(4);
H_MAG(20) = 1;
SK_MY = zeros(4,1);
SK_MY(1) = 1/(OP(20,20) + R_MAG + OP(1,20)*(magD*SH_MAG(3) - SH_MAG(7) + magN*SH_MAG(6)) + OP(17,20)*SH_MAG(1) + OP(18,20)*SH_MAG(4) - (SH_MAG(9) - 2*q1*q2)*(OP(20,16) + OP(1,16)*(magD*SH_MAG(3) - SH_MAG(7) + magN*SH_MAG(6)) + OP(17,16)*SH_MAG(1) + OP(18,16)*SH_MAG(4) - OP(3,16)*(magE*SH_MAG(5) + magD*SH_MAG(8) + magN*SH_MAG(2)) - OP(16,16)*(SH_MAG(9) - 2*q1*q2)) - OP(3,20)*(magE*SH_MAG(5) + magD*SH_MAG(8) + magN*SH_MAG(2)) + (magD*SH_MAG(3) - SH_MAG(7) + magN*SH_MAG(6))*(OP(20,1) + OP(1,1)*(magD*SH_MAG(3) - SH_MAG(7) + magN*SH_MAG(6)) + OP(17,1)*SH_MAG(1) + OP(18,1)*SH_MAG(4) - OP(3,1)*(magE*SH_MAG(5) + magD*SH_MAG(8) + magN*SH_MAG(2)) - OP(16,1)*(SH_MAG(9) - 2*q1*q2)) + SH_MAG(1)*(OP(20,17) + OP(1,17)*(magD*SH_MAG(3) - SH_MAG(7) + magN*SH_MAG(6)) + OP(17,17)*SH_MAG(1) + OP(18,17)*SH_MAG(4) - OP(3,17)*(magE*SH_MAG(5) + magD*SH_MAG(8) + magN*SH_MAG(2)) - OP(16,17)*(SH_MAG(9) - 2*q1*q2)) + SH_MAG(4)*(OP(20,18) + OP(1,18)*(magD*SH_MAG(3) - SH_MAG(7) + magN*SH_MAG(6)) + OP(17,18)*SH_MAG(1) + OP(18,18)*SH_MAG(4) - OP(3,18)*(magE*SH_MAG(5) + magD*SH_MAG(8) + magN*SH_MAG(2)) - OP(16,18)*(SH_MAG(9) - 2*q1*q2)) - OP(16,20)*(SH_MAG(9) - 2*q1*q2) - (magE*SH_MAG(5) + magD*SH_MAG(8) + magN*SH_MAG(2))*(OP(20,3) + OP(1,3)*(magD*SH_MAG(3) - SH_MAG(7) + magN*SH_MAG(6)) + OP(17,3)*SH_MAG(1) + OP(18,3)*SH_MAG(4) - OP(3,3)*(magE*SH_MAG(5) + magD*SH_MAG(8) + magN*SH_MAG(2)) - OP(16,3)*(SH_MAG(9) - 2*q1*q2)));
SK_MY(2) = magE*SH_MAG(5) + magD*SH_MAG(8) + magN*SH_MAG(2);
SK_MY(3) = magD*SH_MAG(3) - SH_MAG(7) + magN*SH_MAG(6);
SK_MY(4) = SH_MAG(9) - 2*q1*q2;
Kfusion = zeros(21,1);
Kfusion = zeros(1,1);
Kfusion(1) = SK_MY(1)*(OP(1,20) + OP(1,17)*SH_MAG(1) + OP(1,18)*SH_MAG(4) + OP(1,1)*SK_MY(3) - OP(1,3)*SK_MY(2) - OP(1,16)*SK_MY(4));
Kfusion(2) = SK_MY(1)*(OP(2,20) + OP(2,17)*SH_MAG(1) + OP(2,18)*SH_MAG(4) + OP(2,1)*SK_MY(3) - OP(2,3)*SK_MY(2) - OP(2,16)*SK_MY(4));
Kfusion(3) = SK_MY(1)*(OP(3,20) + OP(3,17)*SH_MAG(1) + OP(3,18)*SH_MAG(4) + OP(3,1)*SK_MY(3) - OP(3,3)*SK_MY(2) - OP(3,16)*SK_MY(4));
Kfusion(4) = SK_MY(1)*(OP(4,20) + OP(4,17)*SH_MAG(1) + OP(4,18)*SH_MAG(4) + OP(4,1)*SK_MY(3) - OP(4,3)*SK_MY(2) - OP(4,16)*SK_MY(4));
Kfusion(5) = SK_MY(1)*(OP(5,20) + OP(5,17)*SH_MAG(1) + OP(5,18)*SH_MAG(4) + OP(5,1)*SK_MY(3) - OP(5,3)*SK_MY(2) - OP(5,16)*SK_MY(4));
Kfusion(6) = SK_MY(1)*(OP(6,20) + OP(6,17)*SH_MAG(1) + OP(6,18)*SH_MAG(4) + OP(6,1)*SK_MY(3) - OP(6,3)*SK_MY(2) - OP(6,16)*SK_MY(4));
Kfusion(7) = SK_MY(1)*(OP(7,20) + OP(7,17)*SH_MAG(1) + OP(7,18)*SH_MAG(4) + OP(7,1)*SK_MY(3) - OP(7,3)*SK_MY(2) - OP(7,16)*SK_MY(4));
Kfusion(8) = SK_MY(1)*(OP(8,20) + OP(8,17)*SH_MAG(1) + OP(8,18)*SH_MAG(4) + OP(8,1)*SK_MY(3) - OP(8,3)*SK_MY(2) - OP(8,16)*SK_MY(4));
Kfusion(9) = SK_MY(1)*(OP(9,20) + OP(9,17)*SH_MAG(1) + OP(9,18)*SH_MAG(4) + OP(9,1)*SK_MY(3) - OP(9,3)*SK_MY(2) - OP(9,16)*SK_MY(4));
Kfusion(10) = SK_MY(1)*(OP(10,20) + OP(10,17)*SH_MAG(1) + OP(10,18)*SH_MAG(4) + OP(10,1)*SK_MY(3) - OP(10,3)*SK_MY(2) - OP(10,16)*SK_MY(4));
Kfusion(11) = SK_MY(1)*(OP(11,20) + OP(11,17)*SH_MAG(1) + OP(11,18)*SH_MAG(4) + OP(11,1)*SK_MY(3) - OP(11,3)*SK_MY(2) - OP(11,16)*SK_MY(4));
Kfusion(12) = SK_MY(1)*(OP(12,20) + OP(12,17)*SH_MAG(1) + OP(12,18)*SH_MAG(4) + OP(12,1)*SK_MY(3) - OP(12,3)*SK_MY(2) - OP(12,16)*SK_MY(4));
Kfusion(13) = SK_MY(1)*(OP(13,20) + OP(13,17)*SH_MAG(1) + OP(13,18)*SH_MAG(4) + OP(13,1)*SK_MY(3) - OP(13,3)*SK_MY(2) - OP(13,16)*SK_MY(4));
Kfusion(14) = SK_MY(1)*(OP(14,20) + OP(14,17)*SH_MAG(1) + OP(14,18)*SH_MAG(4) + OP(14,1)*SK_MY(3) - OP(14,3)*SK_MY(2) - OP(14,16)*SK_MY(4));
Kfusion(15) = SK_MY(1)*(OP(15,20) + OP(15,17)*SH_MAG(1) + OP(15,18)*SH_MAG(4) + OP(15,1)*SK_MY(3) - OP(15,3)*SK_MY(2) - OP(15,16)*SK_MY(4));
Kfusion(16) = SK_MY(1)*(OP(16,20) + OP(16,17)*SH_MAG(1) + OP(16,18)*SH_MAG(4) + OP(16,1)*SK_MY(3) - OP(16,3)*SK_MY(2) - OP(16,16)*SK_MY(4));
Kfusion(17) = SK_MY(1)*(OP(17,20) + OP(17,17)*SH_MAG(1) + OP(17,18)*SH_MAG(4) + OP(17,1)*SK_MY(3) - OP(17,3)*SK_MY(2) - OP(17,16)*SK_MY(4));
Kfusion(18) = SK_MY(1)*(OP(18,20) + OP(18,17)*SH_MAG(1) + OP(18,18)*SH_MAG(4) + OP(18,1)*SK_MY(3) - OP(18,3)*SK_MY(2) - OP(18,16)*SK_MY(4));
Kfusion(19) = SK_MY(1)*(OP(19,20) + OP(19,17)*SH_MAG(1) + OP(19,18)*SH_MAG(4) + OP(19,1)*SK_MY(3) - OP(19,3)*SK_MY(2) - OP(19,16)*SK_MY(4));
Kfusion(20) = SK_MY(1)*(OP(20,20) + OP(20,17)*SH_MAG(1) + OP(20,18)*SH_MAG(4) + OP(20,1)*SK_MY(3) - OP(20,3)*SK_MY(2) - OP(20,16)*SK_MY(4));
Kfusion(21) = SK_MY(1)*(OP(21,20) + OP(21,17)*SH_MAG(1) + OP(21,18)*SH_MAG(4) + OP(21,1)*SK_MY(3) - OP(21,3)*SK_MY(2) - OP(21,16)*SK_MY(4));
H_MAG = zeros(1,21);
H_MAG(1) = magN*(SH_MAG(9) - 2*q1*q2) - magD*SH_MAG(4) - magE*SH_MAG(1);
H_MAG(2) = magE*SH_MAG(5) + magN*SH_MAG(2) - magD*(2*q0*q2 - 2*q1*q3);
H_MAG(16) = SH_MAG(6);
H_MAG(17) = 2*q2*q3 - 2*q0*q1;
H_MAG(18) = SH_MAG(3);
H_MAG(21) = 1;
SK_MZ = zeros(4,1);
SK_MZ(1) = 1/(OP(21,21) + R_MAG + OP(16,21)*SH_MAG(6) + OP(18,21)*SH_MAG(3) + SH_MAG(6)*(OP(21,16) + OP(16,16)*SH_MAG(6) + OP(18,16)*SH_MAG(3) - OP(1,16)*(magE*SH_MAG(1) + magD*SH_MAG(4) - magN*(SH_MAG(9) - 2*q1*q2)) - OP(17,16)*(2*q0*q1 - 2*q2*q3) + OP(2,16)*(magE*SH_MAG(5) + magN*SH_MAG(2) - magD*(2*q0*q2 - 2*q1*q3))) + SH_MAG(3)*(OP(21,18) + OP(16,18)*SH_MAG(6) + OP(18,18)*SH_MAG(3) - OP(1,18)*(magE*SH_MAG(1) + magD*SH_MAG(4) - magN*(SH_MAG(9) - 2*q1*q2)) - OP(17,18)*(2*q0*q1 - 2*q2*q3) + OP(2,18)*(magE*SH_MAG(5) + magN*SH_MAG(2) - magD*(2*q0*q2 - 2*q1*q3))) - OP(1,21)*(magE*SH_MAG(1) + magD*SH_MAG(4) - magN*(SH_MAG(9) - 2*q1*q2)) - (magE*SH_MAG(1) + magD*SH_MAG(4) - magN*(SH_MAG(9) - 2*q1*q2))*(OP(21,1) + OP(16,1)*SH_MAG(6) + OP(18,1)*SH_MAG(3) - OP(1,1)*(magE*SH_MAG(1) + magD*SH_MAG(4) - magN*(SH_MAG(9) - 2*q1*q2)) - OP(17,1)*(2*q0*q1 - 2*q2*q3) + OP(2,1)*(magE*SH_MAG(5) + magN*SH_MAG(2) - magD*(2*q0*q2 - 2*q1*q3))) - OP(17,21)*(2*q0*q1 - 2*q2*q3) - (2*q0*q1 - 2*q2*q3)*(OP(21,17) + OP(16,17)*SH_MAG(6) + OP(18,17)*SH_MAG(3) - OP(1,17)*(magE*SH_MAG(1) + magD*SH_MAG(4) - magN*(SH_MAG(9) - 2*q1*q2)) - OP(17,17)*(2*q0*q1 - 2*q2*q3) + OP(2,17)*(magE*SH_MAG(5) + magN*SH_MAG(2) - magD*(2*q0*q2 - 2*q1*q3))) + OP(2,21)*(magE*SH_MAG(5) + magN*SH_MAG(2) - magD*(2*q0*q2 - 2*q1*q3)) + (magE*SH_MAG(5) + magN*SH_MAG(2) - magD*(2*q0*q2 - 2*q1*q3))*(OP(21,2) + OP(16,2)*SH_MAG(6) + OP(18,2)*SH_MAG(3) - OP(1,2)*(magE*SH_MAG(1) + magD*SH_MAG(4) - magN*(SH_MAG(9) - 2*q1*q2)) - OP(17,2)*(2*q0*q1 - 2*q2*q3) + OP(2,2)*(magE*SH_MAG(5) + magN*SH_MAG(2) - magD*(2*q0*q2 - 2*q1*q3))));
SK_MZ(2) = magE*SH_MAG(5) + magN*SH_MAG(2) - magD*(2*q0*q2 - 2*q1*q3);
SK_MZ(3) = magE*SH_MAG(1) + magD*SH_MAG(4) - magN*(SH_MAG(9) - 2*q1*q2);
SK_MZ(4) = 2*q0*q1 - 2*q2*q3;
Kfusion = zeros(21,1);
Kfusion = zeros(1,1);
Kfusion(1) = SK_MZ(1)*(OP(1,21) + OP(1,18)*SH_MAG(3) + OP(1,16)*SH_MAG(6) - OP(1,1)*SK_MZ(3) + OP(1,2)*SK_MZ(2) - OP(1,17)*SK_MZ(4));
Kfusion(2) = SK_MZ(1)*(OP(2,21) + OP(2,18)*SH_MAG(3) + OP(2,16)*SH_MAG(6) - OP(2,1)*SK_MZ(3) + OP(2,2)*SK_MZ(2) - OP(2,17)*SK_MZ(4));
Kfusion(3) = SK_MZ(1)*(OP(3,21) + OP(3,18)*SH_MAG(3) + OP(3,16)*SH_MAG(6) - OP(3,1)*SK_MZ(3) + OP(3,2)*SK_MZ(2) - OP(3,17)*SK_MZ(4));
Kfusion(4) = SK_MZ(1)*(OP(4,21) + OP(4,18)*SH_MAG(3) + OP(4,16)*SH_MAG(6) - OP(4,1)*SK_MZ(3) + OP(4,2)*SK_MZ(2) - OP(4,17)*SK_MZ(4));
Kfusion(5) = SK_MZ(1)*(OP(5,21) + OP(5,18)*SH_MAG(3) + OP(5,16)*SH_MAG(6) - OP(5,1)*SK_MZ(3) + OP(5,2)*SK_MZ(2) - OP(5,17)*SK_MZ(4));
Kfusion(6) = SK_MZ(1)*(OP(6,21) + OP(6,18)*SH_MAG(3) + OP(6,16)*SH_MAG(6) - OP(6,1)*SK_MZ(3) + OP(6,2)*SK_MZ(2) - OP(6,17)*SK_MZ(4));
Kfusion(7) = SK_MZ(1)*(OP(7,21) + OP(7,18)*SH_MAG(3) + OP(7,16)*SH_MAG(6) - OP(7,1)*SK_MZ(3) + OP(7,2)*SK_MZ(2) - OP(7,17)*SK_MZ(4));
Kfusion(8) = SK_MZ(1)*(OP(8,21) + OP(8,18)*SH_MAG(3) + OP(8,16)*SH_MAG(6) - OP(8,1)*SK_MZ(3) + OP(8,2)*SK_MZ(2) - OP(8,17)*SK_MZ(4));
Kfusion(9) = SK_MZ(1)*(OP(9,21) + OP(9,18)*SH_MAG(3) + OP(9,16)*SH_MAG(6) - OP(9,1)*SK_MZ(3) + OP(9,2)*SK_MZ(2) - OP(9,17)*SK_MZ(4));
Kfusion(10) = SK_MZ(1)*(OP(10,21) + OP(10,18)*SH_MAG(3) + OP(10,16)*SH_MAG(6) - OP(10,1)*SK_MZ(3) + OP(10,2)*SK_MZ(2) - OP(10,17)*SK_MZ(4));
Kfusion(11) = SK_MZ(1)*(OP(11,21) + OP(11,18)*SH_MAG(3) + OP(11,16)*SH_MAG(6) - OP(11,1)*SK_MZ(3) + OP(11,2)*SK_MZ(2) - OP(11,17)*SK_MZ(4));
Kfusion(12) = SK_MZ(1)*(OP(12,21) + OP(12,18)*SH_MAG(3) + OP(12,16)*SH_MAG(6) - OP(12,1)*SK_MZ(3) + OP(12,2)*SK_MZ(2) - OP(12,17)*SK_MZ(4));
Kfusion(13) = SK_MZ(1)*(OP(13,21) + OP(13,18)*SH_MAG(3) + OP(13,16)*SH_MAG(6) - OP(13,1)*SK_MZ(3) + OP(13,2)*SK_MZ(2) - OP(13,17)*SK_MZ(4));
Kfusion(14) = SK_MZ(1)*(OP(14,21) + OP(14,18)*SH_MAG(3) + OP(14,16)*SH_MAG(6) - OP(14,1)*SK_MZ(3) + OP(14,2)*SK_MZ(2) - OP(14,17)*SK_MZ(4));
Kfusion(15) = SK_MZ(1)*(OP(15,21) + OP(15,18)*SH_MAG(3) + OP(15,16)*SH_MAG(6) - OP(15,1)*SK_MZ(3) + OP(15,2)*SK_MZ(2) - OP(15,17)*SK_MZ(4));
Kfusion(16) = SK_MZ(1)*(OP(16,21) + OP(16,18)*SH_MAG(3) + OP(16,16)*SH_MAG(6) - OP(16,1)*SK_MZ(3) + OP(16,2)*SK_MZ(2) - OP(16,17)*SK_MZ(4));
Kfusion(17) = SK_MZ(1)*(OP(17,21) + OP(17,18)*SH_MAG(3) + OP(17,16)*SH_MAG(6) - OP(17,1)*SK_MZ(3) + OP(17,2)*SK_MZ(2) - OP(17,17)*SK_MZ(4));
Kfusion(18) = SK_MZ(1)*(OP(18,21) + OP(18,18)*SH_MAG(3) + OP(18,16)*SH_MAG(6) - OP(18,1)*SK_MZ(3) + OP(18,2)*SK_MZ(2) - OP(18,17)*SK_MZ(4));
Kfusion(19) = SK_MZ(1)*(OP(19,21) + OP(19,18)*SH_MAG(3) + OP(19,16)*SH_MAG(6) - OP(19,1)*SK_MZ(3) + OP(19,2)*SK_MZ(2) - OP(19,17)*SK_MZ(4));
Kfusion(20) = SK_MZ(1)*(OP(20,21) + OP(20,18)*SH_MAG(3) + OP(20,16)*SH_MAG(6) - OP(20,1)*SK_MZ(3) + OP(20,2)*SK_MZ(2) - OP(20,17)*SK_MZ(4));
Kfusion(21) = SK_MZ(1)*(OP(21,21) + OP(21,18)*SH_MAG(3) + OP(21,16)*SH_MAG(6) - OP(21,1)*SK_MZ(3) + OP(21,2)*SK_MZ(2) - OP(21,17)*SK_MZ(4));
SH_LOS = zeros(11,1);
SH_LOS(1) = (q1*rotErrX)/2 - q0 + (q2*rotErrY)/2 + (q3*rotErrZ)/2;
SH_LOS(2) = q2 + (q0*rotErrY)/2 - (q1*rotErrZ)/2 + (q3*rotErrX)/2;
SH_LOS(3) = q1 + (q0*rotErrX)/2 + (q2*rotErrZ)/2 - (q3*rotErrY)/2;
SH_LOS(4) = q3 + (q0*rotErrZ)/2 + (q1*rotErrY)/2 - (q2*rotErrX)/2;
SH_LOS(5) = SH_LOS(1)^2 - SH_LOS(2)^2 - SH_LOS(3)^2 + SH_LOS(4)^2;
SH_LOS(6) = vd*(2*SH_LOS(1)*SH_LOS(2) + 2*SH_LOS(3)*SH_LOS(4)) - ve*(2*SH_LOS(1)*SH_LOS(4) - 2*SH_LOS(2)*SH_LOS(3)) + vn*(SH_LOS(1)^2 - SH_LOS(2)^2 + SH_LOS(3)^2 - SH_LOS(4)^2);
SH_LOS(7) = vn*(2*SH_LOS(1)*SH_LOS(4) + 2*SH_LOS(2)*SH_LOS(3)) - vd*(2*SH_LOS(1)*SH_LOS(3) - 2*SH_LOS(2)*SH_LOS(4)) + ve*(SH_LOS(1)^2 + SH_LOS(2)^2 - SH_LOS(3)^2 - SH_LOS(4)^2);
SH_LOS(8) = 1/(pd - ptd);
SH_LOS(9) = q0*SH_LOS(3) - q1*SH_LOS(1) + q3*SH_LOS(2) + q2*SH_LOS(4);
SH_LOS(10) = q1*SH_LOS(2) + q0*SH_LOS(4) + q3*SH_LOS(1) - q2*SH_LOS(3);
SH_LOS(11) = q2*SH_LOS(1) - q0*SH_LOS(2) + q1*SH_LOS(4) + q3*SH_LOS(3);
H_LOS = zeros(1,21);
H_LOS(1) = SH_LOS(7)*SH_LOS(8)*SH_LOS(9) - SH_LOS(5)*SH_LOS(8)*(ve*(q1*SH_LOS(1) - q0*SH_LOS(3) + q3*SH_LOS(2) + q2*SH_LOS(4)) - vd*(q0*SH_LOS(1) + q1*SH_LOS(3) + q2*SH_LOS(2) - q3*SH_LOS(4)) + vn*(q0*SH_LOS(2) - q2*SH_LOS(1) + q1*SH_LOS(4) + q3*SH_LOS(3)));
H_LOS(2) = - SH_LOS(7)*SH_LOS(8)*SH_LOS(11) - SH_LOS(5)*SH_LOS(8)*(vd*(q1*SH_LOS(2) + q0*SH_LOS(4) + q3*SH_LOS(1) - q2*SH_LOS(3)) + ve*(q0*SH_LOS(2) + q2*SH_LOS(1) - q1*SH_LOS(4) + q3*SH_LOS(3)) + vn*(q1*SH_LOS(1) + q0*SH_LOS(3) - q3*SH_LOS(2) + q2*SH_LOS(4)));
H_LOS(3) = SH_LOS(5)*SH_LOS(8)*(vd*SH_LOS(11) + ve*(q1*SH_LOS(2) + q0*SH_LOS(4) - q3*SH_LOS(1) + q2*SH_LOS(3)) - vn*(q0*SH_LOS(1) - q1*SH_LOS(3) + q2*SH_LOS(2) + q3*SH_LOS(4))) - SH_LOS(7)*SH_LOS(8)*SH_LOS(10);
H_LOS(4) = -SH_LOS(5)*SH_LOS(8)*(2*SH_LOS(1)*SH_LOS(4) + 2*SH_LOS(2)*SH_LOS(3));
H_LOS(5) = -SH_LOS(5)*SH_LOS(8)*(SH_LOS(1)^2 + SH_LOS(2)^2 - SH_LOS(3)^2 - SH_LOS(4)^2);
H_LOS(6) = SH_LOS(5)*SH_LOS(8)*(2*SH_LOS(1)*SH_LOS(3) - 2*SH_LOS(2)*SH_LOS(4));
H_LOS(9) = (SH_LOS(5)*SH_LOS(7))/(pd - ptd)^2;
H_LOS = zeros(1,21);
H_LOS(1) = SH_LOS(5)*SH_LOS(8)*(vd*SH_LOS(10) + ve*(q0*SH_LOS(2) + q2*SH_LOS(1) - q1*SH_LOS(4) + q3*SH_LOS(3)) + vn*(q1*SH_LOS(1) + q0*SH_LOS(3) - q3*SH_LOS(2) + q2*SH_LOS(4))) - SH_LOS(6)*SH_LOS(8)*SH_LOS(9);
H_LOS(2) = SH_LOS(6)*SH_LOS(8)*SH_LOS(11) - SH_LOS(5)*SH_LOS(8)*(ve*(q1*SH_LOS(1) - q0*SH_LOS(3) + q3*SH_LOS(2) + q2*SH_LOS(4)) - vd*(q0*SH_LOS(1) + q1*SH_LOS(3) + q2*SH_LOS(2) - q3*SH_LOS(4)) + vn*(q0*SH_LOS(2) - q2*SH_LOS(1) + q1*SH_LOS(4) + q3*SH_LOS(3)));
H_LOS(3) = SH_LOS(5)*SH_LOS(8)*(vd*SH_LOS(9) - ve*(q0*SH_LOS(1) + q1*SH_LOS(3) - q2*SH_LOS(2) + q3*SH_LOS(4)) + vn*(q1*SH_LOS(2) - q0*SH_LOS(4) + q3*SH_LOS(1) + q2*SH_LOS(3))) + SH_LOS(6)*SH_LOS(8)*SH_LOS(10);
H_LOS(4) = SH_LOS(5)*SH_LOS(8)*(SH_LOS(1)^2 - SH_LOS(2)^2 + SH_LOS(3)^2 - SH_LOS(4)^2);
H_LOS(5) = -SH_LOS(5)*SH_LOS(8)*(2*SH_LOS(1)*SH_LOS(4) - 2*SH_LOS(2)*SH_LOS(3));
H_LOS(6) = SH_LOS(5)*SH_LOS(8)*(2*SH_LOS(1)*SH_LOS(2) + 2*SH_LOS(3)*SH_LOS(4));
H_LOS(9) = -(SH_LOS(5)*SH_LOS(6))/(pd - ptd)^2;
SK_LOS = zeros(10,1);
SK_LOS(1) = 1/(R_LOS + (SH_LOS(5)*SH_LOS(8)*(vd*SH_LOS(11) + ve*(q1*SH_LOS(2) + q0*SH_LOS(4) - q3*SH_LOS(1) + q2*SH_LOS(3)) - vn*(q0*SH_LOS(1) - q1*SH_LOS(3) + q2*SH_LOS(2) + q3*SH_LOS(4))) - SH_LOS(7)*SH_LOS(8)*SH_LOS(10))*(OP(1,3)*(SH_LOS(7)*SH_LOS(8)*SH_LOS(9) - SH_LOS(5)*SH_LOS(8)*(ve*(q1*SH_LOS(1) - q0*SH_LOS(3) + q3*SH_LOS(2) + q2*SH_LOS(4)) - vd*(q0*SH_LOS(1) + q1*SH_LOS(3) + q2*SH_LOS(2) - q3*SH_LOS(4)) + vn*(q0*SH_LOS(2) - q2*SH_LOS(1) + q1*SH_LOS(4) + q3*SH_LOS(3)))) - OP(2,3)*(SH_LOS(7)*SH_LOS(8)*SH_LOS(11) + SH_LOS(5)*SH_LOS(8)*(vd*(q1*SH_LOS(2) + q0*SH_LOS(4) + q3*SH_LOS(1) - q2*SH_LOS(3)) + ve*(q0*SH_LOS(2) + q2*SH_LOS(1) - q1*SH_LOS(4) + q3*SH_LOS(3)) + vn*(q1*SH_LOS(1) + q0*SH_LOS(3) - q3*SH_LOS(2) + q2*SH_LOS(4)))) + OP(3,3)*(SH_LOS(5)*SH_LOS(8)*(vd*SH_LOS(11) + ve*(q1*SH_LOS(2) + q0*SH_LOS(4) - q3*SH_LOS(1) + q2*SH_LOS(3)) - vn*(q0*SH_LOS(1) - q1*SH_LOS(3) + q2*SH_LOS(2) + q3*SH_LOS(4))) - SH_LOS(7)*SH_LOS(8)*SH_LOS(10)) - OP(5,3)*SH_LOS(5)*SH_LOS(8)*(SH_LOS(1)^2 + SH_LOS(2)^2 - SH_LOS(3)^2 - SH_LOS(4)^2) + (OP(9,3)*SH_LOS(5)*SH_LOS(7))/(pd - ptd)^2 - OP(4,3)*SH_LOS(5)*SH_LOS(8)*(2*SH_LOS(1)*SH_LOS(4) + 2*SH_LOS(2)*SH_LOS(3)) + OP(6,3)*SH_LOS(5)*SH_LOS(8)*(2*SH_LOS(1)*SH_LOS(3) - 2*SH_LOS(2)*SH_LOS(4))) + (SH_LOS(7)*SH_LOS(8)*SH_LOS(9) - SH_LOS(5)*SH_LOS(8)*(ve*(q1*SH_LOS(1) - q0*SH_LOS(3) + q3*SH_LOS(2) + q2*SH_LOS(4)) - vd*(q0*SH_LOS(1) + q1*SH_LOS(3) + q2*SH_LOS(2) - q3*SH_LOS(4)) + vn*(q0*SH_LOS(2) - q2*SH_LOS(1) + q1*SH_LOS(4) + q3*SH_LOS(3))))*(OP(1,1)*(SH_LOS(7)*SH_LOS(8)*SH_LOS(9) - SH_LOS(5)*SH_LOS(8)*(ve*(q1*SH_LOS(1) - q0*SH_LOS(3) + q3*SH_LOS(2) + q2*SH_LOS(4)) - vd*(q0*SH_LOS(1) + q1*SH_LOS(3) + q2*SH_LOS(2) - q3*SH_LOS(4)) + vn*(q0*SH_LOS(2) - q2*SH_LOS(1) + q1*SH_LOS(4) + q3*SH_LOS(3)))) - OP(2,1)*(SH_LOS(7)*SH_LOS(8)*SH_LOS(11) + SH_LOS(5)*SH_LOS(8)*(vd*(q1*SH_LOS(2) + q0*SH_LOS(4) + q3*SH_LOS(1) - q2*SH_LOS(3)) + ve*(q0*SH_LOS(2) + q2*SH_LOS(1) - q1*SH_LOS(4) + q3*SH_LOS(3)) + vn*(q1*SH_LOS(1) + q0*SH_LOS(3) - q3*SH_LOS(2) + q2*SH_LOS(4)))) + OP(3,1)*(SH_LOS(5)*SH_LOS(8)*(vd*SH_LOS(11) + ve*(q1*SH_LOS(2) + q0*SH_LOS(4) - q3*SH_LOS(1) + q2*SH_LOS(3)) - vn*(q0*SH_LOS(1) - q1*SH_LOS(3) + q2*SH_LOS(2) + q3*SH_LOS(4))) - SH_LOS(7)*SH_LOS(8)*SH_LOS(10)) - OP(5,1)*SH_LOS(5)*SH_LOS(8)*(SH_LOS(1)^2 + SH_LOS(2)^2 - SH_LOS(3)^2 - SH_LOS(4)^2) + (OP(9,1)*SH_LOS(5)*SH_LOS(7))/(pd - ptd)^2 - OP(4,1)*SH_LOS(5)*SH_LOS(8)*(2*SH_LOS(1)*SH_LOS(4) + 2*SH_LOS(2)*SH_LOS(3)) + OP(6,1)*SH_LOS(5)*SH_LOS(8)*(2*SH_LOS(1)*SH_LOS(3) - 2*SH_LOS(2)*SH_LOS(4))) - (SH_LOS(7)*SH_LOS(8)*SH_LOS(11) + SH_LOS(5)*SH_LOS(8)*(vd*(q1*SH_LOS(2) + q0*SH_LOS(4) + q3*SH_LOS(1) - q2*SH_LOS(3)) + ve*(q0*SH_LOS(2) + q2*SH_LOS(1) - q1*SH_LOS(4) + q3*SH_LOS(3)) + vn*(q1*SH_LOS(1) + q0*SH_LOS(3) - q3*SH_LOS(2) + q2*SH_LOS(4))))*(OP(1,2)*(SH_LOS(7)*SH_LOS(8)*SH_LOS(9) - SH_LOS(5)*SH_LOS(8)*(ve*(q1*SH_LOS(1) - q0*SH_LOS(3) + q3*SH_LOS(2) + q2*SH_LOS(4)) - vd*(q0*SH_LOS(1) + q1*SH_LOS(3) + q2*SH_LOS(2) - q3*SH_LOS(4)) + vn*(q0*SH_LOS(2) - q2*SH_LOS(1) + q1*SH_LOS(4) + q3*SH_LOS(3)))) - OP(2,2)*(SH_LOS(7)*SH_LOS(8)*SH_LOS(11) + SH_LOS(5)*SH_LOS(8)*(vd*(q1*SH_LOS(2) + q0*SH_LOS(4) + q3*SH_LOS(1) - q2*SH_LOS(3)) + ve*(q0*SH_LOS(2) + q2*SH_LOS(1) - q1*SH_LOS(4) + q3*SH_LOS(3)) + vn*(q1*SH_LOS(1) + q0*SH_LOS(3) - q3*SH_LOS(2) + q2*SH_LOS(4)))) + OP(3,2)*(SH_LOS(5)*SH_LOS(8)*(vd*SH_LOS(11) + ve*(q1*SH_LOS(2) + q0*SH_LOS(4) - q3*SH_LOS(1) + q2*SH_LOS(3)) - vn*(q0*SH_LOS(1) - q1*SH_LOS(3) + q2*SH_LOS(2) + q3*SH_LOS(4))) - SH_LOS(7)*SH_LOS(8)*SH_LOS(10)) - OP(5,2)*SH_LOS(5)*SH_LOS(8)*(SH_LOS(1)^2 + SH_LOS(2)^2 - SH_LOS(3)^2 - SH_LOS(4)^2) + (OP(9,2)*SH_LOS(5)*SH_LOS(7))/(pd - ptd)^2 - OP(4,2)*SH_LOS(5)*SH_LOS(8)*(2*SH_LOS(1)*SH_LOS(4) + 2*SH_LOS(2)*SH_LOS(3)) + OP(6,2)*SH_LOS(5)*SH_LOS(8)*(2*SH_LOS(1)*SH_LOS(3) - 2*SH_LOS(2)*SH_LOS(4))) - SH_LOS(5)*SH_LOS(8)*(SH_LOS(1)^2 + SH_LOS(2)^2 - SH_LOS(3)^2 - SH_LOS(4)^2)*(OP(1,5)*(SH_LOS(7)*SH_LOS(8)*SH_LOS(9) - SH_LOS(5)*SH_LOS(8)*(ve*(q1*SH_LOS(1) - q0*SH_LOS(3) + q3*SH_LOS(2) + q2*SH_LOS(4)) - vd*(q0*SH_LOS(1) + q1*SH_LOS(3) + q2*SH_LOS(2) - q3*SH_LOS(4)) + vn*(q0*SH_LOS(2) - q2*SH_LOS(1) + q1*SH_LOS(4) + q3*SH_LOS(3)))) - OP(2,5)*(SH_LOS(7)*SH_LOS(8)*SH_LOS(11) + SH_LOS(5)*SH_LOS(8)*(vd*(q1*SH_LOS(2) + q0*SH_LOS(4) + q3*SH_LOS(1) - q2*SH_LOS(3)) + ve*(q0*SH_LOS(2) + q2*SH_LOS(1) - q1*SH_LOS(4) + q3*SH_LOS(3)) + vn*(q1*SH_LOS(1) + q0*SH_LOS(3) - q3*SH_LOS(2) + q2*SH_LOS(4)))) + OP(3,5)*(SH_LOS(5)*SH_LOS(8)*(vd*SH_LOS(11) + ve*(q1*SH_LOS(2) + q0*SH_LOS(4) - q3*SH_LOS(1) + q2*SH_LOS(3)) - vn*(q0*SH_LOS(1) - q1*SH_LOS(3) + q2*SH_LOS(2) + q3*SH_LOS(4))) - SH_LOS(7)*SH_LOS(8)*SH_LOS(10)) - OP(5,5)*SH_LOS(5)*SH_LOS(8)*(SH_LOS(1)^2 + SH_LOS(2)^2 - SH_LOS(3)^2 - SH_LOS(4)^2) + (OP(9,5)*SH_LOS(5)*SH_LOS(7))/(pd - ptd)^2 - OP(4,5)*SH_LOS(5)*SH_LOS(8)*(2*SH_LOS(1)*SH_LOS(4) + 2*SH_LOS(2)*SH_LOS(3)) + OP(6,5)*SH_LOS(5)*SH_LOS(8)*(2*SH_LOS(1)*SH_LOS(3) - 2*SH_LOS(2)*SH_LOS(4))) + (SH_LOS(5)*SH_LOS(7)*(OP(1,9)*(SH_LOS(7)*SH_LOS(8)*SH_LOS(9) - SH_LOS(5)*SH_LOS(8)*(ve*(q1*SH_LOS(1) - q0*SH_LOS(3) + q3*SH_LOS(2) + q2*SH_LOS(4)) - vd*(q0*SH_LOS(1) + q1*SH_LOS(3) + q2*SH_LOS(2) - q3*SH_LOS(4)) + vn*(q0*SH_LOS(2) - q2*SH_LOS(1) + q1*SH_LOS(4) + q3*SH_LOS(3)))) - OP(2,9)*(SH_LOS(7)*SH_LOS(8)*SH_LOS(11) + SH_LOS(5)*SH_LOS(8)*(vd*(q1*SH_LOS(2) + q0*SH_LOS(4) + q3*SH_LOS(1) - q2*SH_LOS(3)) + ve*(q0*SH_LOS(2) + q2*SH_LOS(1) - q1*SH_LOS(4) + q3*SH_LOS(3)) + vn*(q1*SH_LOS(1) + q0*SH_LOS(3) - q3*SH_LOS(2) + q2*SH_LOS(4)))) + OP(3,9)*(SH_LOS(5)*SH_LOS(8)*(vd*SH_LOS(11) + ve*(q1*SH_LOS(2) + q0*SH_LOS(4) - q3*SH_LOS(1) + q2*SH_LOS(3)) - vn*(q0*SH_LOS(1) - q1*SH_LOS(3) + q2*SH_LOS(2) + q3*SH_LOS(4))) - SH_LOS(7)*SH_LOS(8)*SH_LOS(10)) - OP(5,9)*SH_LOS(5)*SH_LOS(8)*(SH_LOS(1)^2 + SH_LOS(2)^2 - SH_LOS(3)^2 - SH_LOS(4)^2) + (OP(9,9)*SH_LOS(5)*SH_LOS(7))/(pd - ptd)^2 - OP(4,9)*SH_LOS(5)*SH_LOS(8)*(2*SH_LOS(1)*SH_LOS(4) + 2*SH_LOS(2)*SH_LOS(3)) + OP(6,9)*SH_LOS(5)*SH_LOS(8)*(2*SH_LOS(1)*SH_LOS(3) - 2*SH_LOS(2)*SH_LOS(4))))/(pd - ptd)^2 - SH_LOS(5)*SH_LOS(8)*(2*SH_LOS(1)*SH_LOS(4) + 2*SH_LOS(2)*SH_LOS(3))*(OP(1,4)*(SH_LOS(7)*SH_LOS(8)*SH_LOS(9) - SH_LOS(5)*SH_LOS(8)*(ve*(q1*SH_LOS(1) - q0*SH_LOS(3) + q3*SH_LOS(2) + q2*SH_LOS(4)) - vd*(q0*SH_LOS(1) + q1*SH_LOS(3) + q2*SH_LOS(2) - q3*SH_LOS(4)) + vn*(q0*SH_LOS(2) - q2*SH_LOS(1) + q1*SH_LOS(4) + q3*SH_LOS(3)))) - OP(2,4)*(SH_LOS(7)*SH_LOS(8)*SH_LOS(11) + SH_LOS(5)*SH_LOS(8)*(vd*(q1*SH_LOS(2) + q0*SH_LOS(4) + q3*SH_LOS(1) - q2*SH_LOS(3)) + ve*(q0*SH_LOS(2) + q2*SH_LOS(1) - q1*SH_LOS(4) + q3*SH_LOS(3)) + vn*(q1*SH_LOS(1) + q0*SH_LOS(3) - q3*SH_LOS(2) + q2*SH_LOS(4)))) + OP(3,4)*(SH_LOS(5)*SH_LOS(8)*(vd*SH_LOS(11) + ve*(q1*SH_LOS(2) + q0*SH_LOS(4) - q3*SH_LOS(1) + q2*SH_LOS(3)) - vn*(q0*SH_LOS(1) - q1*SH_LOS(3) + q2*SH_LOS(2) + q3*SH_LOS(4))) - SH_LOS(7)*SH_LOS(8)*SH_LOS(10)) - OP(5,4)*SH_LOS(5)*SH_LOS(8)*(SH_LOS(1)^2 + SH_LOS(2)^2 - SH_LOS(3)^2 - SH_LOS(4)^2) + (OP(9,4)*SH_LOS(5)*SH_LOS(7))/(pd - ptd)^2 - OP(4,4)*SH_LOS(5)*SH_LOS(8)*(2*SH_LOS(1)*SH_LOS(4) + 2*SH_LOS(2)*SH_LOS(3)) + OP(6,4)*SH_LOS(5)*SH_LOS(8)*(2*SH_LOS(1)*SH_LOS(3) - 2*SH_LOS(2)*SH_LOS(4))) + SH_LOS(5)*SH_LOS(8)*(2*SH_LOS(1)*SH_LOS(3) - 2*SH_LOS(2)*SH_LOS(4))*(OP(1,6)*(SH_LOS(7)*SH_LOS(8)*SH_LOS(9) - SH_LOS(5)*SH_LOS(8)*(ve*(q1*SH_LOS(1) - q0*SH_LOS(3) + q3*SH_LOS(2) + q2*SH_LOS(4)) - vd*(q0*SH_LOS(1) + q1*SH_LOS(3) + q2*SH_LOS(2) - q3*SH_LOS(4)) + vn*(q0*SH_LOS(2) - q2*SH_LOS(1) + q1*SH_LOS(4) + q3*SH_LOS(3)))) - OP(2,6)*(SH_LOS(7)*SH_LOS(8)*SH_LOS(11) + SH_LOS(5)*SH_LOS(8)*(vd*(q1*SH_LOS(2) + q0*SH_LOS(4) + q3*SH_LOS(1) - q2*SH_LOS(3)) + ve*(q0*SH_LOS(2) + q2*SH_LOS(1) - q1*SH_LOS(4) + q3*SH_LOS(3)) + vn*(q1*SH_LOS(1) + q0*SH_LOS(3) - q3*SH_LOS(2) + q2*SH_LOS(4)))) + OP(3,6)*(SH_LOS(5)*SH_LOS(8)*(vd*SH_LOS(11) + ve*(q1*SH_LOS(2) + q0*SH_LOS(4) - q3*SH_LOS(1) + q2*SH_LOS(3)) - vn*(q0*SH_LOS(1) - q1*SH_LOS(3) + q2*SH_LOS(2) + q3*SH_LOS(4))) - SH_LOS(7)*SH_LOS(8)*SH_LOS(10)) - OP(5,6)*SH_LOS(5)*SH_LOS(8)*(SH_LOS(1)^2 + SH_LOS(2)^2 - SH_LOS(3)^2 - SH_LOS(4)^2) + (OP(9,6)*SH_LOS(5)*SH_LOS(7))/(pd - ptd)^2 - OP(4,6)*SH_LOS(5)*SH_LOS(8)*(2*SH_LOS(1)*SH_LOS(4) + 2*SH_LOS(2)*SH_LOS(3)) + OP(6,6)*SH_LOS(5)*SH_LOS(8)*(2*SH_LOS(1)*SH_LOS(3) - 2*SH_LOS(2)*SH_LOS(4))));
SK_LOS(2) = 1/(R_LOS + (SH_LOS(6)*SH_LOS(8)*SH_LOS(11) - SH_LOS(5)*SH_LOS(8)*(ve*(q1*SH_LOS(1) - q0*SH_LOS(3) + q3*SH_LOS(2) + q2*SH_LOS(4)) - vd*(q0*SH_LOS(1) + q1*SH_LOS(3) + q2*SH_LOS(2) - q3*SH_LOS(4)) + vn*(q0*SH_LOS(2) - q2*SH_LOS(1) + q1*SH_LOS(4) + q3*SH_LOS(3))))*(OP(2,2)*(SH_LOS(6)*SH_LOS(8)*SH_LOS(11) - SH_LOS(5)*SH_LOS(8)*(ve*(q1*SH_LOS(1) - q0*SH_LOS(3) + q3*SH_LOS(2) + q2*SH_LOS(4)) - vd*(q0*SH_LOS(1) + q1*SH_LOS(3) + q2*SH_LOS(2) - q3*SH_LOS(4)) + vn*(q0*SH_LOS(2) - q2*SH_LOS(1) + q1*SH_LOS(4) + q3*SH_LOS(3)))) + OP(1,2)*(SH_LOS(5)*SH_LOS(8)*(vd*SH_LOS(10) + ve*(q0*SH_LOS(2) + q2*SH_LOS(1) - q1*SH_LOS(4) + q3*SH_LOS(3)) + vn*(q1*SH_LOS(1) + q0*SH_LOS(3) - q3*SH_LOS(2) + q2*SH_LOS(4))) - SH_LOS(6)*SH_LOS(8)*SH_LOS(9)) + OP(3,2)*(SH_LOS(5)*SH_LOS(8)*(vd*SH_LOS(9) - ve*(q0*SH_LOS(1) + q1*SH_LOS(3) - q2*SH_LOS(2) + q3*SH_LOS(4)) + vn*(q1*SH_LOS(2) - q0*SH_LOS(4) + q3*SH_LOS(1) + q2*SH_LOS(3))) + SH_LOS(6)*SH_LOS(8)*SH_LOS(10)) + OP(4,2)*SH_LOS(5)*SH_LOS(8)*(SH_LOS(1)^2 - SH_LOS(2)^2 + SH_LOS(3)^2 - SH_LOS(4)^2) - (OP(9,2)*SH_LOS(5)*SH_LOS(6))/(pd - ptd)^2 - OP(5,2)*SH_LOS(5)*SH_LOS(8)*(2*SH_LOS(1)*SH_LOS(4) - 2*SH_LOS(2)*SH_LOS(3)) + OP(6,2)*SH_LOS(5)*SH_LOS(8)*(2*SH_LOS(1)*SH_LOS(2) + 2*SH_LOS(3)*SH_LOS(4))) + (SH_LOS(5)*SH_LOS(8)*(vd*SH_LOS(10) + ve*(q0*SH_LOS(2) + q2*SH_LOS(1) - q1*SH_LOS(4) + q3*SH_LOS(3)) + vn*(q1*SH_LOS(1) + q0*SH_LOS(3) - q3*SH_LOS(2) + q2*SH_LOS(4))) - SH_LOS(6)*SH_LOS(8)*SH_LOS(9))*(OP(2,1)*(SH_LOS(6)*SH_LOS(8)*SH_LOS(11) - SH_LOS(5)*SH_LOS(8)*(ve*(q1*SH_LOS(1) - q0*SH_LOS(3) + q3*SH_LOS(2) + q2*SH_LOS(4)) - vd*(q0*SH_LOS(1) + q1*SH_LOS(3) + q2*SH_LOS(2) - q3*SH_LOS(4)) + vn*(q0*SH_LOS(2) - q2*SH_LOS(1) + q1*SH_LOS(4) + q3*SH_LOS(3)))) + OP(1,1)*(SH_LOS(5)*SH_LOS(8)*(vd*SH_LOS(10) + ve*(q0*SH_LOS(2) + q2*SH_LOS(1) - q1*SH_LOS(4) + q3*SH_LOS(3)) + vn*(q1*SH_LOS(1) + q0*SH_LOS(3) - q3*SH_LOS(2) + q2*SH_LOS(4))) - SH_LOS(6)*SH_LOS(8)*SH_LOS(9)) + OP(3,1)*(SH_LOS(5)*SH_LOS(8)*(vd*SH_LOS(9) - ve*(q0*SH_LOS(1) + q1*SH_LOS(3) - q2*SH_LOS(2) + q3*SH_LOS(4)) + vn*(q1*SH_LOS(2) - q0*SH_LOS(4) + q3*SH_LOS(1) + q2*SH_LOS(3))) + SH_LOS(6)*SH_LOS(8)*SH_LOS(10)) + OP(4,1)*SH_LOS(5)*SH_LOS(8)*(SH_LOS(1)^2 - SH_LOS(2)^2 + SH_LOS(3)^2 - SH_LOS(4)^2) - (OP(9,1)*SH_LOS(5)*SH_LOS(6))/(pd - ptd)^2 - OP(5,1)*SH_LOS(5)*SH_LOS(8)*(2*SH_LOS(1)*SH_LOS(4) - 2*SH_LOS(2)*SH_LOS(3)) + OP(6,1)*SH_LOS(5)*SH_LOS(8)*(2*SH_LOS(1)*SH_LOS(2) + 2*SH_LOS(3)*SH_LOS(4))) + (SH_LOS(5)*SH_LOS(8)*(vd*SH_LOS(9) - ve*(q0*SH_LOS(1) + q1*SH_LOS(3) - q2*SH_LOS(2) + q3*SH_LOS(4)) + vn*(q1*SH_LOS(2) - q0*SH_LOS(4) + q3*SH_LOS(1) + q2*SH_LOS(3))) + SH_LOS(6)*SH_LOS(8)*SH_LOS(10))*(OP(2,3)*(SH_LOS(6)*SH_LOS(8)*SH_LOS(11) - SH_LOS(5)*SH_LOS(8)*(ve*(q1*SH_LOS(1) - q0*SH_LOS(3) + q3*SH_LOS(2) + q2*SH_LOS(4)) - vd*(q0*SH_LOS(1) + q1*SH_LOS(3) + q2*SH_LOS(2) - q3*SH_LOS(4)) + vn*(q0*SH_LOS(2) - q2*SH_LOS(1) + q1*SH_LOS(4) + q3*SH_LOS(3)))) + OP(1,3)*(SH_LOS(5)*SH_LOS(8)*(vd*SH_LOS(10) + ve*(q0*SH_LOS(2) + q2*SH_LOS(1) - q1*SH_LOS(4) + q3*SH_LOS(3)) + vn*(q1*SH_LOS(1) + q0*SH_LOS(3) - q3*SH_LOS(2) + q2*SH_LOS(4))) - SH_LOS(6)*SH_LOS(8)*SH_LOS(9)) + OP(3,3)*(SH_LOS(5)*SH_LOS(8)*(vd*SH_LOS(9) - ve*(q0*SH_LOS(1) + q1*SH_LOS(3) - q2*SH_LOS(2) + q3*SH_LOS(4)) + vn*(q1*SH_LOS(2) - q0*SH_LOS(4) + q3*SH_LOS(1) + q2*SH_LOS(3))) + SH_LOS(6)*SH_LOS(8)*SH_LOS(10)) + OP(4,3)*SH_LOS(5)*SH_LOS(8)*(SH_LOS(1)^2 - SH_LOS(2)^2 + SH_LOS(3)^2 - SH_LOS(4)^2) - (OP(9,3)*SH_LOS(5)*SH_LOS(6))/(pd - ptd)^2 - OP(5,3)*SH_LOS(5)*SH_LOS(8)*(2*SH_LOS(1)*SH_LOS(4) - 2*SH_LOS(2)*SH_LOS(3)) + OP(6,3)*SH_LOS(5)*SH_LOS(8)*(2*SH_LOS(1)*SH_LOS(2) + 2*SH_LOS(3)*SH_LOS(4))) + SH_LOS(5)*SH_LOS(8)*(SH_LOS(1)^2 - SH_LOS(2)^2 + SH_LOS(3)^2 - SH_LOS(4)^2)*(OP(2,4)*(SH_LOS(6)*SH_LOS(8)*SH_LOS(11) - SH_LOS(5)*SH_LOS(8)*(ve*(q1*SH_LOS(1) - q0*SH_LOS(3) + q3*SH_LOS(2) + q2*SH_LOS(4)) - vd*(q0*SH_LOS(1) + q1*SH_LOS(3) + q2*SH_LOS(2) - q3*SH_LOS(4)) + vn*(q0*SH_LOS(2) - q2*SH_LOS(1) + q1*SH_LOS(4) + q3*SH_LOS(3)))) + OP(1,4)*(SH_LOS(5)*SH_LOS(8)*(vd*SH_LOS(10) + ve*(q0*SH_LOS(2) + q2*SH_LOS(1) - q1*SH_LOS(4) + q3*SH_LOS(3)) + vn*(q1*SH_LOS(1) + q0*SH_LOS(3) - q3*SH_LOS(2) + q2*SH_LOS(4))) - SH_LOS(6)*SH_LOS(8)*SH_LOS(9)) + OP(3,4)*(SH_LOS(5)*SH_LOS(8)*(vd*SH_LOS(9) - ve*(q0*SH_LOS(1) + q1*SH_LOS(3) - q2*SH_LOS(2) + q3*SH_LOS(4)) + vn*(q1*SH_LOS(2) - q0*SH_LOS(4) + q3*SH_LOS(1) + q2*SH_LOS(3))) + SH_LOS(6)*SH_LOS(8)*SH_LOS(10)) + OP(4,4)*SH_LOS(5)*SH_LOS(8)*(SH_LOS(1)^2 - SH_LOS(2)^2 + SH_LOS(3)^2 - SH_LOS(4)^2) - (OP(9,4)*SH_LOS(5)*SH_LOS(6))/(pd - ptd)^2 - OP(5,4)*SH_LOS(5)*SH_LOS(8)*(2*SH_LOS(1)*SH_LOS(4) - 2*SH_LOS(2)*SH_LOS(3)) + OP(6,4)*SH_LOS(5)*SH_LOS(8)*(2*SH_LOS(1)*SH_LOS(2) + 2*SH_LOS(3)*SH_LOS(4))) - (SH_LOS(5)*SH_LOS(6)*(OP(2,9)*(SH_LOS(6)*SH_LOS(8)*SH_LOS(11) - SH_LOS(5)*SH_LOS(8)*(ve*(q1*SH_LOS(1) - q0*SH_LOS(3) + q3*SH_LOS(2) + q2*SH_LOS(4)) - vd*(q0*SH_LOS(1) + q1*SH_LOS(3) + q2*SH_LOS(2) - q3*SH_LOS(4)) + vn*(q0*SH_LOS(2) - q2*SH_LOS(1) + q1*SH_LOS(4) + q3*SH_LOS(3)))) + OP(1,9)*(SH_LOS(5)*SH_LOS(8)*(vd*SH_LOS(10) + ve*(q0*SH_LOS(2) + q2*SH_LOS(1) - q1*SH_LOS(4) + q3*SH_LOS(3)) + vn*(q1*SH_LOS(1) + q0*SH_LOS(3) - q3*SH_LOS(2) + q2*SH_LOS(4))) - SH_LOS(6)*SH_LOS(8)*SH_LOS(9)) + OP(3,9)*(SH_LOS(5)*SH_LOS(8)*(vd*SH_LOS(9) - ve*(q0*SH_LOS(1) + q1*SH_LOS(3) - q2*SH_LOS(2) + q3*SH_LOS(4)) + vn*(q1*SH_LOS(2) - q0*SH_LOS(4) + q3*SH_LOS(1) + q2*SH_LOS(3))) + SH_LOS(6)*SH_LOS(8)*SH_LOS(10)) + OP(4,9)*SH_LOS(5)*SH_LOS(8)*(SH_LOS(1)^2 - SH_LOS(2)^2 + SH_LOS(3)^2 - SH_LOS(4)^2) - (OP(9,9)*SH_LOS(5)*SH_LOS(6))/(pd - ptd)^2 - OP(5,9)*SH_LOS(5)*SH_LOS(8)*(2*SH_LOS(1)*SH_LOS(4) - 2*SH_LOS(2)*SH_LOS(3)) + OP(6,9)*SH_LOS(5)*SH_LOS(8)*(2*SH_LOS(1)*SH_LOS(2) + 2*SH_LOS(3)*SH_LOS(4))))/(pd - ptd)^2 - SH_LOS(5)*SH_LOS(8)*(2*SH_LOS(1)*SH_LOS(4) - 2*SH_LOS(2)*SH_LOS(3))*(OP(2,5)*(SH_LOS(6)*SH_LOS(8)*SH_LOS(11) - SH_LOS(5)*SH_LOS(8)*(ve*(q1*SH_LOS(1) - q0*SH_LOS(3) + q3*SH_LOS(2) + q2*SH_LOS(4)) - vd*(q0*SH_LOS(1) + q1*SH_LOS(3) + q2*SH_LOS(2) - q3*SH_LOS(4)) + vn*(q0*SH_LOS(2) - q2*SH_LOS(1) + q1*SH_LOS(4) + q3*SH_LOS(3)))) + OP(1,5)*(SH_LOS(5)*SH_LOS(8)*(vd*SH_LOS(10) + ve*(q0*SH_LOS(2) + q2*SH_LOS(1) - q1*SH_LOS(4) + q3*SH_LOS(3)) + vn*(q1*SH_LOS(1) + q0*SH_LOS(3) - q3*SH_LOS(2) + q2*SH_LOS(4))) - SH_LOS(6)*SH_LOS(8)*SH_LOS(9)) + OP(3,5)*(SH_LOS(5)*SH_LOS(8)*(vd*SH_LOS(9) - ve*(q0*SH_LOS(1) + q1*SH_LOS(3) - q2*SH_LOS(2) + q3*SH_LOS(4)) + vn*(q1*SH_LOS(2) - q0*SH_LOS(4) + q3*SH_LOS(1) + q2*SH_LOS(3))) + SH_LOS(6)*SH_LOS(8)*SH_LOS(10)) + OP(4,5)*SH_LOS(5)*SH_LOS(8)*(SH_LOS(1)^2 - SH_LOS(2)^2 + SH_LOS(3)^2 - SH_LOS(4)^2) - (OP(9,5)*SH_LOS(5)*SH_LOS(6))/(pd - ptd)^2 - OP(5,5)*SH_LOS(5)*SH_LOS(8)*(2*SH_LOS(1)*SH_LOS(4) - 2*SH_LOS(2)*SH_LOS(3)) + OP(6,5)*SH_LOS(5)*SH_LOS(8)*(2*SH_LOS(1)*SH_LOS(2) + 2*SH_LOS(3)*SH_LOS(4))) + SH_LOS(5)*SH_LOS(8)*(2*SH_LOS(1)*SH_LOS(2) + 2*SH_LOS(3)*SH_LOS(4))*(OP(2,6)*(SH_LOS(6)*SH_LOS(8)*SH_LOS(11) - SH_LOS(5)*SH_LOS(8)*(ve*(q1*SH_LOS(1) - q0*SH_LOS(3) + q3*SH_LOS(2) + q2*SH_LOS(4)) - vd*(q0*SH_LOS(1) + q1*SH_LOS(3) + q2*SH_LOS(2) - q3*SH_LOS(4)) + vn*(q0*SH_LOS(2) - q2*SH_LOS(1) + q1*SH_LOS(4) + q3*SH_LOS(3)))) + OP(1,6)*(SH_LOS(5)*SH_LOS(8)*(vd*SH_LOS(10) + ve*(q0*SH_LOS(2) + q2*SH_LOS(1) - q1*SH_LOS(4) + q3*SH_LOS(3)) + vn*(q1*SH_LOS(1) + q0*SH_LOS(3) - q3*SH_LOS(2) + q2*SH_LOS(4))) - SH_LOS(6)*SH_LOS(8)*SH_LOS(9)) + OP(3,6)*(SH_LOS(5)*SH_LOS(8)*(vd*SH_LOS(9) - ve*(q0*SH_LOS(1) + q1*SH_LOS(3) - q2*SH_LOS(2) + q3*SH_LOS(4)) + vn*(q1*SH_LOS(2) - q0*SH_LOS(4) + q3*SH_LOS(1) + q2*SH_LOS(3))) + SH_LOS(6)*SH_LOS(8)*SH_LOS(10)) + OP(4,6)*SH_LOS(5)*SH_LOS(8)*(SH_LOS(1)^2 - SH_LOS(2)^2 + SH_LOS(3)^2 - SH_LOS(4)^2) - (OP(9,6)*SH_LOS(5)*SH_LOS(6))/(pd - ptd)^2 - OP(5,6)*SH_LOS(5)*SH_LOS(8)*(2*SH_LOS(1)*SH_LOS(4) - 2*SH_LOS(2)*SH_LOS(3)) + OP(6,6)*SH_LOS(5)*SH_LOS(8)*(2*SH_LOS(1)*SH_LOS(2) + 2*SH_LOS(3)*SH_LOS(4))));
SK_LOS(3) = SH_LOS(5)*SH_LOS(8)*(ve*(q1*SH_LOS(1) - q0*SH_LOS(3) + q3*SH_LOS(2) + q2*SH_LOS(4)) - vd*(q0*SH_LOS(1) + q1*SH_LOS(3) + q2*SH_LOS(2) - q3*SH_LOS(4)) + vn*(q0*SH_LOS(2) - q2*SH_LOS(1) + q1*SH_LOS(4) + q3*SH_LOS(3)));
SK_LOS(4) = SH_LOS(7)*SH_LOS(8)*SH_LOS(11) + SH_LOS(5)*SH_LOS(8)*(vd*(q1*SH_LOS(2) + q0*SH_LOS(4) + q3*SH_LOS(1) - q2*SH_LOS(3)) + ve*(q0*SH_LOS(2) + q2*SH_LOS(1) - q1*SH_LOS(4) + q3*SH_LOS(3)) + vn*(q1*SH_LOS(1) + q0*SH_LOS(3) - q3*SH_LOS(2) + q2*SH_LOS(4)));
SK_LOS(5) = SH_LOS(7)*SH_LOS(8)*SH_LOS(10) - SH_LOS(5)*SH_LOS(8)*(vd*SH_LOS(11) + ve*(q1*SH_LOS(2) + q0*SH_LOS(4) - q3*SH_LOS(1) + q2*SH_LOS(3)) - vn*(q0*SH_LOS(1) - q1*SH_LOS(3) + q2*SH_LOS(2) + q3*SH_LOS(4)));
SK_LOS(6) = SH_LOS(5)*SH_LOS(8)*(vd*SH_LOS(9) - ve*(q0*SH_LOS(1) + q1*SH_LOS(3) - q2*SH_LOS(2) + q3*SH_LOS(4)) + vn*(q1*SH_LOS(2) - q0*SH_LOS(4) + q3*SH_LOS(1) + q2*SH_LOS(3))) + SH_LOS(6)*SH_LOS(8)*SH_LOS(10);
SK_LOS(7) = SH_LOS(6)*SH_LOS(8)*SH_LOS(9) - SH_LOS(5)*SH_LOS(8)*(vd*SH_LOS(10) + ve*(q0*SH_LOS(2) + q2*SH_LOS(1) - q1*SH_LOS(4) + q3*SH_LOS(3)) + vn*(q1*SH_LOS(1) + q0*SH_LOS(3) - q3*SH_LOS(2) + q2*SH_LOS(4)));
SK_LOS(8) = SH_LOS(1)^2 - SH_LOS(2)^2 + SH_LOS(3)^2 - SH_LOS(4)^2;
SK_LOS(9) = SH_LOS(1)^2 + SH_LOS(2)^2 - SH_LOS(3)^2 - SH_LOS(4)^2;
SK_LOS(10) = SH_LOS(8);
Kfusion = zeros(21,1);
Kfusion = zeros(1,1);
Kfusion(1) = -SK_LOS(1)*(OP(1,2)*SK_LOS(4) - OP(1,3)*(SH_LOS(5)*SK_LOS(10)*(vd*SH_LOS(11) + ve*(q1*SH_LOS(2) + q0*SH_LOS(4) - q3*SH_LOS(1) + q2*SH_LOS(3)) - vn*(q0*SH_LOS(1) - q1*SH_LOS(3) + q2*SH_LOS(2) + q3*SH_LOS(4))) - SH_LOS(7)*SH_LOS(10)*SK_LOS(10)) + OP(1,1)*(SK_LOS(3) - SH_LOS(7)*SH_LOS(9)*SK_LOS(10)) - (OP(1,9)*SH_LOS(5)*SH_LOS(7))/(pd - ptd)^2 + OP(1,5)*SH_LOS(5)*SK_LOS(9)*SK_LOS(10) + OP(1,4)*SH_LOS(5)*SK_LOS(10)*(2*SH_LOS(1)*SH_LOS(4) + 2*SH_LOS(2)*SH_LOS(3)) - OP(1,6)*SH_LOS(5)*SK_LOS(10)*(2*SH_LOS(1)*SH_LOS(3) - 2*SH_LOS(2)*SH_LOS(4)));
Kfusion(2) = -SK_LOS(1)*(OP(2,2)*SK_LOS(4) + OP(2,3)*SK_LOS(5) + OP(2,1)*(SK_LOS(3) - SH_LOS(7)*SH_LOS(9)*SK_LOS(10)) - (OP(2,9)*SH_LOS(5)*SH_LOS(7))/(pd - ptd)^2 + OP(2,5)*SH_LOS(5)*SK_LOS(9)*SK_LOS(10) + OP(2,4)*SH_LOS(5)*SK_LOS(10)*(2*SH_LOS(1)*SH_LOS(4) + 2*SH_LOS(2)*SH_LOS(3)) - OP(2,6)*SH_LOS(5)*SK_LOS(10)*(2*SH_LOS(1)*SH_LOS(3) - 2*SH_LOS(2)*SH_LOS(4)));
Kfusion(3) = -SK_LOS(1)*(OP(3,2)*SK_LOS(4) + OP(3,3)*SK_LOS(5) + OP(3,1)*(SK_LOS(3) - SH_LOS(7)*SH_LOS(9)*SK_LOS(10)) - (OP(3,9)*SH_LOS(5)*SH_LOS(7))/(pd - ptd)^2 + OP(3,5)*SH_LOS(5)*SK_LOS(9)*SK_LOS(10) + OP(3,4)*SH_LOS(5)*SK_LOS(10)*(2*SH_LOS(1)*SH_LOS(4) + 2*SH_LOS(2)*SH_LOS(3)) - OP(3,6)*SH_LOS(5)*SK_LOS(10)*(2*SH_LOS(1)*SH_LOS(3) - 2*SH_LOS(2)*SH_LOS(4)));
Kfusion(4) = -SK_LOS(1)*(OP(4,2)*SK_LOS(4) + OP(4,3)*SK_LOS(5) + OP(4,1)*(SK_LOS(3) - SH_LOS(7)*SH_LOS(9)*SK_LOS(10)) - (OP(4,9)*SH_LOS(5)*SH_LOS(7))/(pd - ptd)^2 + OP(4,5)*SH_LOS(5)*SK_LOS(9)*SK_LOS(10) + OP(4,4)*SH_LOS(5)*SK_LOS(10)*(2*SH_LOS(1)*SH_LOS(4) + 2*SH_LOS(2)*SH_LOS(3)) - OP(4,6)*SH_LOS(5)*SK_LOS(10)*(2*SH_LOS(1)*SH_LOS(3) - 2*SH_LOS(2)*SH_LOS(4)));
Kfusion(5) = -SK_LOS(1)*(OP(5,2)*SK_LOS(4) + OP(5,3)*SK_LOS(5) + OP(5,1)*(SK_LOS(3) - SH_LOS(7)*SH_LOS(9)*SK_LOS(10)) - (OP(5,9)*SH_LOS(5)*SH_LOS(7))/(pd - ptd)^2 + OP(5,5)*SH_LOS(5)*SK_LOS(9)*SK_LOS(10) + OP(5,4)*SH_LOS(5)*SK_LOS(10)*(2*SH_LOS(1)*SH_LOS(4) + 2*SH_LOS(2)*SH_LOS(3)) - OP(5,6)*SH_LOS(5)*SK_LOS(10)*(2*SH_LOS(1)*SH_LOS(3) - 2*SH_LOS(2)*SH_LOS(4)));
Kfusion(6) = -SK_LOS(1)*(OP(6,2)*SK_LOS(4) + OP(6,3)*SK_LOS(5) + OP(6,1)*(SK_LOS(3) - SH_LOS(7)*SH_LOS(9)*SK_LOS(10)) - (OP(6,9)*SH_LOS(5)*SH_LOS(7))/(pd - ptd)^2 + OP(6,5)*SH_LOS(5)*SK_LOS(9)*SK_LOS(10) + OP(6,4)*SH_LOS(5)*SK_LOS(10)*(2*SH_LOS(1)*SH_LOS(4) + 2*SH_LOS(2)*SH_LOS(3)) - OP(6,6)*SH_LOS(5)*SK_LOS(10)*(2*SH_LOS(1)*SH_LOS(3) - 2*SH_LOS(2)*SH_LOS(4)));
Kfusion(7) = -SK_LOS(1)*(OP(7,2)*SK_LOS(4) + OP(7,3)*SK_LOS(5) + OP(7,1)*(SK_LOS(3) - SH_LOS(7)*SH_LOS(9)*SK_LOS(10)) - (OP(7,9)*SH_LOS(5)*SH_LOS(7))/(pd - ptd)^2 + OP(7,5)*SH_LOS(5)*SK_LOS(9)*SK_LOS(10) + OP(7,4)*SH_LOS(5)*SK_LOS(10)*(2*SH_LOS(1)*SH_LOS(4) + 2*SH_LOS(2)*SH_LOS(3)) - OP(7,6)*SH_LOS(5)*SK_LOS(10)*(2*SH_LOS(1)*SH_LOS(3) - 2*SH_LOS(2)*SH_LOS(4)));
Kfusion(8) = -SK_LOS(1)*(OP(8,2)*SK_LOS(4) + OP(8,3)*SK_LOS(5) + OP(8,1)*(SK_LOS(3) - SH_LOS(7)*SH_LOS(9)*SK_LOS(10)) - (OP(8,9)*SH_LOS(5)*SH_LOS(7))/(pd - ptd)^2 + OP(8,5)*SH_LOS(5)*SK_LOS(9)*SK_LOS(10) + OP(8,4)*SH_LOS(5)*SK_LOS(10)*(2*SH_LOS(1)*SH_LOS(4) + 2*SH_LOS(2)*SH_LOS(3)) - OP(8,6)*SH_LOS(5)*SK_LOS(10)*(2*SH_LOS(1)*SH_LOS(3) - 2*SH_LOS(2)*SH_LOS(4)));
Kfusion(9) = -SK_LOS(1)*(OP(9,2)*SK_LOS(4) + OP(9,3)*SK_LOS(5) + OP(9,1)*(SK_LOS(3) - SH_LOS(7)*SH_LOS(9)*SK_LOS(10)) - (OP(9,9)*SH_LOS(5)*SH_LOS(7))/(pd - ptd)^2 + OP(9,5)*SH_LOS(5)*SK_LOS(9)*SK_LOS(10) + OP(9,4)*SH_LOS(5)*SK_LOS(10)*(2*SH_LOS(1)*SH_LOS(4) + 2*SH_LOS(2)*SH_LOS(3)) - OP(9,6)*SH_LOS(5)*SK_LOS(10)*(2*SH_LOS(1)*SH_LOS(3) - 2*SH_LOS(2)*SH_LOS(4)));
Kfusion(10) = -SK_LOS(1)*(OP(10,2)*SK_LOS(4) + OP(10,3)*SK_LOS(5) + OP(10,1)*(SK_LOS(3) - SH_LOS(7)*SH_LOS(9)*SK_LOS(10)) - (OP(10,9)*SH_LOS(5)*SH_LOS(7))/(pd - ptd)^2 + OP(10,5)*SH_LOS(5)*SK_LOS(9)*SK_LOS(10) + OP(10,4)*SH_LOS(5)*SK_LOS(10)*(2*SH_LOS(1)*SH_LOS(4) + 2*SH_LOS(2)*SH_LOS(3)) - OP(10,6)*SH_LOS(5)*SK_LOS(10)*(2*SH_LOS(1)*SH_LOS(3) - 2*SH_LOS(2)*SH_LOS(4)));
Kfusion(11) = -SK_LOS(1)*(OP(11,2)*SK_LOS(4) + OP(11,3)*SK_LOS(5) + OP(11,1)*(SK_LOS(3) - SH_LOS(7)*SH_LOS(9)*SK_LOS(10)) - (OP(11,9)*SH_LOS(5)*SH_LOS(7))/(pd - ptd)^2 + OP(11,5)*SH_LOS(5)*SK_LOS(9)*SK_LOS(10) + OP(11,4)*SH_LOS(5)*SK_LOS(10)*(2*SH_LOS(1)*SH_LOS(4) + 2*SH_LOS(2)*SH_LOS(3)) - OP(11,6)*SH_LOS(5)*SK_LOS(10)*(2*SH_LOS(1)*SH_LOS(3) - 2*SH_LOS(2)*SH_LOS(4)));
Kfusion(12) = -SK_LOS(1)*(OP(12,2)*SK_LOS(4) + OP(12,3)*SK_LOS(5) + OP(12,1)*(SK_LOS(3) - SH_LOS(7)*SH_LOS(9)*SK_LOS(10)) - (OP(12,9)*SH_LOS(5)*SH_LOS(7))/(pd - ptd)^2 + OP(12,5)*SH_LOS(5)*SK_LOS(9)*SK_LOS(10) + OP(12,4)*SH_LOS(5)*SK_LOS(10)*(2*SH_LOS(1)*SH_LOS(4) + 2*SH_LOS(2)*SH_LOS(3)) - OP(12,6)*SH_LOS(5)*SK_LOS(10)*(2*SH_LOS(1)*SH_LOS(3) - 2*SH_LOS(2)*SH_LOS(4)));
Kfusion(13) = -SK_LOS(1)*(OP(13,2)*SK_LOS(4) + OP(13,3)*SK_LOS(5) + OP(13,1)*(SK_LOS(3) - SH_LOS(7)*SH_LOS(9)*SK_LOS(10)) - (OP(13,9)*SH_LOS(5)*SH_LOS(7))/(pd - ptd)^2 + OP(13,5)*SH_LOS(5)*SK_LOS(9)*SK_LOS(10) + OP(13,4)*SH_LOS(5)*SK_LOS(10)*(2*SH_LOS(1)*SH_LOS(4) + 2*SH_LOS(2)*SH_LOS(3)) - OP(13,6)*SH_LOS(5)*SK_LOS(10)*(2*SH_LOS(1)*SH_LOS(3) - 2*SH_LOS(2)*SH_LOS(4)));
Kfusion(14) = -SK_LOS(1)*(OP(14,2)*SK_LOS(4) + OP(14,3)*SK_LOS(5) + OP(14,1)*(SK_LOS(3) - SH_LOS(7)*SH_LOS(9)*SK_LOS(10)) - (OP(14,9)*SH_LOS(5)*SH_LOS(7))/(pd - ptd)^2 + OP(14,5)*SH_LOS(5)*SK_LOS(9)*SK_LOS(10) + OP(14,4)*SH_LOS(5)*SK_LOS(10)*(2*SH_LOS(1)*SH_LOS(4) + 2*SH_LOS(2)*SH_LOS(3)) - OP(14,6)*SH_LOS(5)*SK_LOS(10)*(2*SH_LOS(1)*SH_LOS(3) - 2*SH_LOS(2)*SH_LOS(4)));
Kfusion(15) = -SK_LOS(1)*(OP(15,2)*SK_LOS(4) + OP(15,3)*SK_LOS(5) + OP(15,1)*(SK_LOS(3) - SH_LOS(7)*SH_LOS(9)*SK_LOS(10)) - (OP(15,9)*SH_LOS(5)*SH_LOS(7))/(pd - ptd)^2 + OP(15,5)*SH_LOS(5)*SK_LOS(9)*SK_LOS(10) + OP(15,4)*SH_LOS(5)*SK_LOS(10)*(2*SH_LOS(1)*SH_LOS(4) + 2*SH_LOS(2)*SH_LOS(3)) - OP(15,6)*SH_LOS(5)*SK_LOS(10)*(2*SH_LOS(1)*SH_LOS(3) - 2*SH_LOS(2)*SH_LOS(4)));
Kfusion(16) = -SK_LOS(1)*(OP(16,2)*SK_LOS(4) + OP(16,3)*SK_LOS(5) + OP(16,1)*(SK_LOS(3) - SH_LOS(7)*SH_LOS(9)*SK_LOS(10)) - (OP(16,9)*SH_LOS(5)*SH_LOS(7))/(pd - ptd)^2 + OP(16,5)*SH_LOS(5)*SK_LOS(9)*SK_LOS(10) + OP(16,4)*SH_LOS(5)*SK_LOS(10)*(2*SH_LOS(1)*SH_LOS(4) + 2*SH_LOS(2)*SH_LOS(3)) - OP(16,6)*SH_LOS(5)*SK_LOS(10)*(2*SH_LOS(1)*SH_LOS(3) - 2*SH_LOS(2)*SH_LOS(4)));
Kfusion(17) = -SK_LOS(1)*(OP(17,2)*SK_LOS(4) + OP(17,3)*SK_LOS(5) + OP(17,1)*(SK_LOS(3) - SH_LOS(7)*SH_LOS(9)*SK_LOS(10)) - (OP(17,9)*SH_LOS(5)*SH_LOS(7))/(pd - ptd)^2 + OP(17,5)*SH_LOS(5)*SK_LOS(9)*SK_LOS(10) + OP(17,4)*SH_LOS(5)*SK_LOS(10)*(2*SH_LOS(1)*SH_LOS(4) + 2*SH_LOS(2)*SH_LOS(3)) - OP(17,6)*SH_LOS(5)*SK_LOS(10)*(2*SH_LOS(1)*SH_LOS(3) - 2*SH_LOS(2)*SH_LOS(4)));
Kfusion(18) = -SK_LOS(1)*(OP(18,2)*SK_LOS(4) + OP(18,3)*SK_LOS(5) + OP(18,1)*(SK_LOS(3) - SH_LOS(7)*SH_LOS(9)*SK_LOS(10)) - (OP(18,9)*SH_LOS(5)*SH_LOS(7))/(pd - ptd)^2 + OP(18,5)*SH_LOS(5)*SK_LOS(9)*SK_LOS(10) + OP(18,4)*SH_LOS(5)*SK_LOS(10)*(2*SH_LOS(1)*SH_LOS(4) + 2*SH_LOS(2)*SH_LOS(3)) - OP(18,6)*SH_LOS(5)*SK_LOS(10)*(2*SH_LOS(1)*SH_LOS(3) - 2*SH_LOS(2)*SH_LOS(4)));
Kfusion(19) = -SK_LOS(1)*(OP(19,2)*SK_LOS(4) + OP(19,3)*SK_LOS(5) + OP(19,1)*(SK_LOS(3) - SH_LOS(7)*SH_LOS(9)*SK_LOS(10)) - (OP(19,9)*SH_LOS(5)*SH_LOS(7))/(pd - ptd)^2 + OP(19,5)*SH_LOS(5)*SK_LOS(9)*SK_LOS(10) + OP(19,4)*SH_LOS(5)*SK_LOS(10)*(2*SH_LOS(1)*SH_LOS(4) + 2*SH_LOS(2)*SH_LOS(3)) - OP(19,6)*SH_LOS(5)*SK_LOS(10)*(2*SH_LOS(1)*SH_LOS(3) - 2*SH_LOS(2)*SH_LOS(4)));
Kfusion(20) = -SK_LOS(1)*(OP(20,2)*SK_LOS(4) + OP(20,3)*SK_LOS(5) + OP(20,1)*(SK_LOS(3) - SH_LOS(7)*SH_LOS(9)*SK_LOS(10)) - (OP(20,9)*SH_LOS(5)*SH_LOS(7))/(pd - ptd)^2 + OP(20,5)*SH_LOS(5)*SK_LOS(9)*SK_LOS(10) + OP(20,4)*SH_LOS(5)*SK_LOS(10)*(2*SH_LOS(1)*SH_LOS(4) + 2*SH_LOS(2)*SH_LOS(3)) - OP(20,6)*SH_LOS(5)*SK_LOS(10)*(2*SH_LOS(1)*SH_LOS(3) - 2*SH_LOS(2)*SH_LOS(4)));
Kfusion(21) = -SK_LOS(1)*(OP(21,2)*SK_LOS(4) + OP(21,3)*SK_LOS(5) + OP(21,1)*(SK_LOS(3) - SH_LOS(7)*SH_LOS(9)*SK_LOS(10)) - (OP(21,9)*SH_LOS(5)*SH_LOS(7))/(pd - ptd)^2 + OP(21,5)*SH_LOS(5)*SK_LOS(9)*SK_LOS(10) + OP(21,4)*SH_LOS(5)*SK_LOS(10)*(2*SH_LOS(1)*SH_LOS(4) + 2*SH_LOS(2)*SH_LOS(3)) - OP(21,6)*SH_LOS(5)*SK_LOS(10)*(2*SH_LOS(1)*SH_LOS(3) - 2*SH_LOS(2)*SH_LOS(4)));
Kfusion = zeros(21,1);
Kfusion = zeros(1,1);
Kfusion(1) = -SK_LOS(2)*(OP(1,1)*SK_LOS(7) - OP(1,3)*SK_LOS(6) + OP(1,2)*(SK_LOS(3) - SH_LOS(6)*SH_LOS(11)*SK_LOS(10)) + (OP(1,9)*SH_LOS(5)*SH_LOS(6))/(pd - ptd)^2 - OP(1,4)*SH_LOS(5)*SK_LOS(8)*SK_LOS(10) + OP(1,5)*SH_LOS(5)*SK_LOS(10)*(2*SH_LOS(1)*SH_LOS(4) - 2*SH_LOS(2)*SH_LOS(3)) - OP(1,6)*SH_LOS(5)*SK_LOS(10)*(2*SH_LOS(1)*SH_LOS(2) + 2*SH_LOS(3)*SH_LOS(4)));
Kfusion(2) = -SK_LOS(2)*(OP(2,1)*SK_LOS(7) - OP(2,3)*SK_LOS(6) + OP(2,2)*(SK_LOS(3) - SH_LOS(6)*SH_LOS(11)*SK_LOS(10)) + (OP(2,9)*SH_LOS(5)*SH_LOS(6))/(pd - ptd)^2 - OP(2,4)*SH_LOS(5)*SK_LOS(8)*SK_LOS(10) + OP(2,5)*SH_LOS(5)*SK_LOS(10)*(2*SH_LOS(1)*SH_LOS(4) - 2*SH_LOS(2)*SH_LOS(3)) - OP(2,6)*SH_LOS(5)*SK_LOS(10)*(2*SH_LOS(1)*SH_LOS(2) + 2*SH_LOS(3)*SH_LOS(4)));
Kfusion(3) = -SK_LOS(2)*(OP(3,1)*SK_LOS(7) - OP(3,3)*SK_LOS(6) + OP(3,2)*(SK_LOS(3) - SH_LOS(6)*SH_LOS(11)*SK_LOS(10)) + (OP(3,9)*SH_LOS(5)*SH_LOS(6))/(pd - ptd)^2 - OP(3,4)*SH_LOS(5)*SK_LOS(8)*SK_LOS(10) + OP(3,5)*SH_LOS(5)*SK_LOS(10)*(2*SH_LOS(1)*SH_LOS(4) - 2*SH_LOS(2)*SH_LOS(3)) - OP(3,6)*SH_LOS(5)*SK_LOS(10)*(2*SH_LOS(1)*SH_LOS(2) + 2*SH_LOS(3)*SH_LOS(4)));
Kfusion(4) = -SK_LOS(2)*(OP(4,1)*SK_LOS(7) - OP(4,3)*SK_LOS(6) + OP(4,2)*(SK_LOS(3) - SH_LOS(6)*SH_LOS(11)*SK_LOS(10)) + (OP(4,9)*SH_LOS(5)*SH_LOS(6))/(pd - ptd)^2 - OP(4,4)*SH_LOS(5)*SK_LOS(8)*SK_LOS(10) + OP(4,5)*SH_LOS(5)*SK_LOS(10)*(2*SH_LOS(1)*SH_LOS(4) - 2*SH_LOS(2)*SH_LOS(3)) - OP(4,6)*SH_LOS(5)*SK_LOS(10)*(2*SH_LOS(1)*SH_LOS(2) + 2*SH_LOS(3)*SH_LOS(4)));
Kfusion(5) = -SK_LOS(2)*(OP(5,1)*SK_LOS(7) - OP(5,3)*SK_LOS(6) + OP(5,2)*(SK_LOS(3) - SH_LOS(6)*SH_LOS(11)*SK_LOS(10)) + (OP(5,9)*SH_LOS(5)*SH_LOS(6))/(pd - ptd)^2 - OP(5,4)*SH_LOS(5)*SK_LOS(8)*SK_LOS(10) + OP(5,5)*SH_LOS(5)*SK_LOS(10)*(2*SH_LOS(1)*SH_LOS(4) - 2*SH_LOS(2)*SH_LOS(3)) - OP(5,6)*SH_LOS(5)*SK_LOS(10)*(2*SH_LOS(1)*SH_LOS(2) + 2*SH_LOS(3)*SH_LOS(4)));
Kfusion(6) = -SK_LOS(2)*(OP(6,1)*SK_LOS(7) - OP(6,3)*SK_LOS(6) + OP(6,2)*(SK_LOS(3) - SH_LOS(6)*SH_LOS(11)*SK_LOS(10)) + (OP(6,9)*SH_LOS(5)*SH_LOS(6))/(pd - ptd)^2 - OP(6,4)*SH_LOS(5)*SK_LOS(8)*SK_LOS(10) + OP(6,5)*SH_LOS(5)*SK_LOS(10)*(2*SH_LOS(1)*SH_LOS(4) - 2*SH_LOS(2)*SH_LOS(3)) - OP(6,6)*SH_LOS(5)*SK_LOS(10)*(2*SH_LOS(1)*SH_LOS(2) + 2*SH_LOS(3)*SH_LOS(4)));
Kfusion(7) = -SK_LOS(2)*(OP(7,1)*SK_LOS(7) - OP(7,3)*SK_LOS(6) + OP(7,2)*(SK_LOS(3) - SH_LOS(6)*SH_LOS(11)*SK_LOS(10)) + (OP(7,9)*SH_LOS(5)*SH_LOS(6))/(pd - ptd)^2 - OP(7,4)*SH_LOS(5)*SK_LOS(8)*SK_LOS(10) + OP(7,5)*SH_LOS(5)*SK_LOS(10)*(2*SH_LOS(1)*SH_LOS(4) - 2*SH_LOS(2)*SH_LOS(3)) - OP(7,6)*SH_LOS(5)*SK_LOS(10)*(2*SH_LOS(1)*SH_LOS(2) + 2*SH_LOS(3)*SH_LOS(4)));
Kfusion(8) = -SK_LOS(2)*(OP(8,1)*SK_LOS(7) - OP(8,3)*SK_LOS(6) + OP(8,2)*(SK_LOS(3) - SH_LOS(6)*SH_LOS(11)*SK_LOS(10)) + (OP(8,9)*SH_LOS(5)*SH_LOS(6))/(pd - ptd)^2 - OP(8,4)*SH_LOS(5)*SK_LOS(8)*SK_LOS(10) + OP(8,5)*SH_LOS(5)*SK_LOS(10)*(2*SH_LOS(1)*SH_LOS(4) - 2*SH_LOS(2)*SH_LOS(3)) - OP(8,6)*SH_LOS(5)*SK_LOS(10)*(2*SH_LOS(1)*SH_LOS(2) + 2*SH_LOS(3)*SH_LOS(4)));
Kfusion(9) = -SK_LOS(2)*(OP(9,1)*SK_LOS(7) - OP(9,3)*SK_LOS(6) + OP(9,2)*(SK_LOS(3) - SH_LOS(6)*SH_LOS(11)*SK_LOS(10)) + (OP(9,9)*SH_LOS(5)*SH_LOS(6))/(pd - ptd)^2 - OP(9,4)*SH_LOS(5)*SK_LOS(8)*SK_LOS(10) + OP(9,5)*SH_LOS(5)*SK_LOS(10)*(2*SH_LOS(1)*SH_LOS(4) - 2*SH_LOS(2)*SH_LOS(3)) - OP(9,6)*SH_LOS(5)*SK_LOS(10)*(2*SH_LOS(1)*SH_LOS(2) + 2*SH_LOS(3)*SH_LOS(4)));
Kfusion(10) = -SK_LOS(2)*(OP(10,1)*SK_LOS(7) - OP(10,3)*SK_LOS(6) + OP(10,2)*(SK_LOS(3) - SH_LOS(6)*SH_LOS(11)*SK_LOS(10)) + (OP(10,9)*SH_LOS(5)*SH_LOS(6))/(pd - ptd)^2 - OP(10,4)*SH_LOS(5)*SK_LOS(8)*SK_LOS(10) + OP(10,5)*SH_LOS(5)*SK_LOS(10)*(2*SH_LOS(1)*SH_LOS(4) - 2*SH_LOS(2)*SH_LOS(3)) - OP(10,6)*SH_LOS(5)*SK_LOS(10)*(2*SH_LOS(1)*SH_LOS(2) + 2*SH_LOS(3)*SH_LOS(4)));
Kfusion(11) = -SK_LOS(2)*(OP(11,1)*SK_LOS(7) - OP(11,3)*SK_LOS(6) + OP(11,2)*(SK_LOS(3) - SH_LOS(6)*SH_LOS(11)*SK_LOS(10)) + (OP(11,9)*SH_LOS(5)*SH_LOS(6))/(pd - ptd)^2 - OP(11,4)*SH_LOS(5)*SK_LOS(8)*SK_LOS(10) + OP(11,5)*SH_LOS(5)*SK_LOS(10)*(2*SH_LOS(1)*SH_LOS(4) - 2*SH_LOS(2)*SH_LOS(3)) - OP(11,6)*SH_LOS(5)*SK_LOS(10)*(2*SH_LOS(1)*SH_LOS(2) + 2*SH_LOS(3)*SH_LOS(4)));
Kfusion(12) = -SK_LOS(2)*(OP(12,1)*SK_LOS(7) - OP(12,3)*SK_LOS(6) + OP(12,2)*(SK_LOS(3) - SH_LOS(6)*SH_LOS(11)*SK_LOS(10)) + (OP(12,9)*SH_LOS(5)*SH_LOS(6))/(pd - ptd)^2 - OP(12,4)*SH_LOS(5)*SK_LOS(8)*SK_LOS(10) + OP(12,5)*SH_LOS(5)*SK_LOS(10)*(2*SH_LOS(1)*SH_LOS(4) - 2*SH_LOS(2)*SH_LOS(3)) - OP(12,6)*SH_LOS(5)*SK_LOS(10)*(2*SH_LOS(1)*SH_LOS(2) + 2*SH_LOS(3)*SH_LOS(4)));
Kfusion(13) = -SK_LOS(2)*(OP(13,1)*SK_LOS(7) - OP(13,3)*SK_LOS(6) + OP(13,2)*(SK_LOS(3) - SH_LOS(6)*SH_LOS(11)*SK_LOS(10)) + (OP(13,9)*SH_LOS(5)*SH_LOS(6))/(pd - ptd)^2 - OP(13,4)*SH_LOS(5)*SK_LOS(8)*SK_LOS(10) + OP(13,5)*SH_LOS(5)*SK_LOS(10)*(2*SH_LOS(1)*SH_LOS(4) - 2*SH_LOS(2)*SH_LOS(3)) - OP(13,6)*SH_LOS(5)*SK_LOS(10)*(2*SH_LOS(1)*SH_LOS(2) + 2*SH_LOS(3)*SH_LOS(4)));
Kfusion(14) = -SK_LOS(2)*(OP(14,1)*SK_LOS(7) - OP(14,3)*SK_LOS(6) + OP(14,2)*(SK_LOS(3) - SH_LOS(6)*SH_LOS(11)*SK_LOS(10)) + (OP(14,9)*SH_LOS(5)*SH_LOS(6))/(pd - ptd)^2 - OP(14,4)*SH_LOS(5)*SK_LOS(8)*SK_LOS(10) + OP(14,5)*SH_LOS(5)*SK_LOS(10)*(2*SH_LOS(1)*SH_LOS(4) - 2*SH_LOS(2)*SH_LOS(3)) - OP(14,6)*SH_LOS(5)*SK_LOS(10)*(2*SH_LOS(1)*SH_LOS(2) + 2*SH_LOS(3)*SH_LOS(4)));
Kfusion(15) = -SK_LOS(2)*(OP(15,1)*SK_LOS(7) - OP(15,3)*SK_LOS(6) + OP(15,2)*(SK_LOS(3) - SH_LOS(6)*SH_LOS(11)*SK_LOS(10)) + (OP(15,9)*SH_LOS(5)*SH_LOS(6))/(pd - ptd)^2 - OP(15,4)*SH_LOS(5)*SK_LOS(8)*SK_LOS(10) + OP(15,5)*SH_LOS(5)*SK_LOS(10)*(2*SH_LOS(1)*SH_LOS(4) - 2*SH_LOS(2)*SH_LOS(3)) - OP(15,6)*SH_LOS(5)*SK_LOS(10)*(2*SH_LOS(1)*SH_LOS(2) + 2*SH_LOS(3)*SH_LOS(4)));
Kfusion(16) = -SK_LOS(2)*(OP(16,1)*SK_LOS(7) - OP(16,3)*SK_LOS(6) + OP(16,2)*(SK_LOS(3) - SH_LOS(6)*SH_LOS(11)*SK_LOS(10)) + (OP(16,9)*SH_LOS(5)*SH_LOS(6))/(pd - ptd)^2 - OP(16,4)*SH_LOS(5)*SK_LOS(8)*SK_LOS(10) + OP(16,5)*SH_LOS(5)*SK_LOS(10)*(2*SH_LOS(1)*SH_LOS(4) - 2*SH_LOS(2)*SH_LOS(3)) - OP(16,6)*SH_LOS(5)*SK_LOS(10)*(2*SH_LOS(1)*SH_LOS(2) + 2*SH_LOS(3)*SH_LOS(4)));
Kfusion(17) = -SK_LOS(2)*(OP(17,1)*SK_LOS(7) - OP(17,3)*SK_LOS(6) + OP(17,2)*(SK_LOS(3) - SH_LOS(6)*SH_LOS(11)*SK_LOS(10)) + (OP(17,9)*SH_LOS(5)*SH_LOS(6))/(pd - ptd)^2 - OP(17,4)*SH_LOS(5)*SK_LOS(8)*SK_LOS(10) + OP(17,5)*SH_LOS(5)*SK_LOS(10)*(2*SH_LOS(1)*SH_LOS(4) - 2*SH_LOS(2)*SH_LOS(3)) - OP(17,6)*SH_LOS(5)*SK_LOS(10)*(2*SH_LOS(1)*SH_LOS(2) + 2*SH_LOS(3)*SH_LOS(4)));
Kfusion(18) = -SK_LOS(2)*(OP(18,1)*SK_LOS(7) - OP(18,3)*SK_LOS(6) + OP(18,2)*(SK_LOS(3) - SH_LOS(6)*SH_LOS(11)*SK_LOS(10)) + (OP(18,9)*SH_LOS(5)*SH_LOS(6))/(pd - ptd)^2 - OP(18,4)*SH_LOS(5)*SK_LOS(8)*SK_LOS(10) + OP(18,5)*SH_LOS(5)*SK_LOS(10)*(2*SH_LOS(1)*SH_LOS(4) - 2*SH_LOS(2)*SH_LOS(3)) - OP(18,6)*SH_LOS(5)*SK_LOS(10)*(2*SH_LOS(1)*SH_LOS(2) + 2*SH_LOS(3)*SH_LOS(4)));
Kfusion(19) = -SK_LOS(2)*(OP(19,1)*SK_LOS(7) - OP(19,3)*SK_LOS(6) + OP(19,2)*(SK_LOS(3) - SH_LOS(6)*SH_LOS(11)*SK_LOS(10)) + (OP(19,9)*SH_LOS(5)*SH_LOS(6))/(pd - ptd)^2 - OP(19,4)*SH_LOS(5)*SK_LOS(8)*SK_LOS(10) + OP(19,5)*SH_LOS(5)*SK_LOS(10)*(2*SH_LOS(1)*SH_LOS(4) - 2*SH_LOS(2)*SH_LOS(3)) - OP(19,6)*SH_LOS(5)*SK_LOS(10)*(2*SH_LOS(1)*SH_LOS(2) + 2*SH_LOS(3)*SH_LOS(4)));
Kfusion(20) = -SK_LOS(2)*(OP(20,1)*SK_LOS(7) - OP(20,3)*SK_LOS(6) + OP(20,2)*(SK_LOS(3) - SH_LOS(6)*SH_LOS(11)*SK_LOS(10)) + (OP(20,9)*SH_LOS(5)*SH_LOS(6))/(pd - ptd)^2 - OP(20,4)*SH_LOS(5)*SK_LOS(8)*SK_LOS(10) + OP(20,5)*SH_LOS(5)*SK_LOS(10)*(2*SH_LOS(1)*SH_LOS(4) - 2*SH_LOS(2)*SH_LOS(3)) - OP(20,6)*SH_LOS(5)*SK_LOS(10)*(2*SH_LOS(1)*SH_LOS(2) + 2*SH_LOS(3)*SH_LOS(4)));
Kfusion(21) = -SK_LOS(2)*(OP(21,1)*SK_LOS(7) - OP(21,3)*SK_LOS(6) + OP(21,2)*(SK_LOS(3) - SH_LOS(6)*SH_LOS(11)*SK_LOS(10)) + (OP(21,9)*SH_LOS(5)*SH_LOS(6))/(pd - ptd)^2 - OP(21,4)*SH_LOS(5)*SK_LOS(8)*SK_LOS(10) + OP(21,5)*SH_LOS(5)*SK_LOS(10)*(2*SH_LOS(1)*SH_LOS(4) - 2*SH_LOS(2)*SH_LOS(3)) - OP(21,6)*SH_LOS(5)*SK_LOS(10)*(2*SH_LOS(1)*SH_LOS(2) + 2*SH_LOS(3)*SH_LOS(4)));
